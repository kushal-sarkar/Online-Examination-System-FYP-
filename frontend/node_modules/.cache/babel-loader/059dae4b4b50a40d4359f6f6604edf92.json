{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\src\\\\components\\\\trainer\\\\testdetails\\\\testdetails.js\";\nimport React, { Component } from 'react';\nimport { Tabs, Icon, Descriptions, Skeleton, Tag, Input, message } from 'antd';\nimport { connect } from 'react-redux';\nimport './testdetails.css';\nimport Questions from '../conducttest/questions';\nimport { updateQuestiosnActiveTest } from '../../../actions/trainerAction';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport moment from 'moment';\nimport Alert from '../../common/alert';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport Stats from './stats';\nimport Trainee from './trainee';\nimport FeedBacks from './feedbacks';\nconst TabPane = Tabs.TabPane;\n\nclass TestDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.tabChange = key => {\n      console.log(key);\n    };\n\n    this.state = {\n      id: this.props.trainer.DataActiveTestDetails.testDetailsId,\n      testdetails: null,\n      stats: null,\n      file: null,\n      loading: true,\n      maxMarks: 0,\n      mainlink: '',\n      feedbacks: []\n    };\n  }\n\n  componentDidMount() {\n    var link = window.location.href.split('/').splice(0, 3);\n    var mainlink = \"\";\n    link.forEach((d, i) => {\n      mainlink = mainlink + d + \"/\";\n    });\n    this.setState({\n      mainlink\n    });\n    var p1 = SecurePost({\n      url: \"\".concat(apis.GET_SINGLE_TEST),\n      data: {\n        id: this.state.id\n      }\n    });\n    var p2 = SecurePost({\n      url: apis.GET_STATS,\n      data: {\n        testid: this.state.id\n      }\n    });\n    var p3 = SecurePost({\n      url: apis.GET_EXCEL,\n      data: {\n        id: this.state.id\n      }\n    });\n    var p4 = SecurePost({\n      url: apis.MAX_MARKS_FETCH,\n      data: {\n        testid: this.state.id\n      }\n    });\n    var p5 = SecurePost({\n      url: apis.GET_FEEDBACKS,\n      data: {\n        testid: this.state.id\n      }\n    });\n    Promise.all([p1, p2, p3, p4, p5]).then(response => {\n      console.log(response);\n\n      if (response[0].data.success && response[1].data.success && response[2].data.success && response[3].data.success && response[4].data.success) {\n        this.setState({\n          testdetails: response[0].data.data,\n          stats: response[1].data.data,\n          file: response[2].data.file,\n          maxMarks: response[3].data.data,\n          loading: false,\n          feedbacks: response[4].data.data\n        });\n      } else {\n        Alert('error', 'Error !', response[0].data.message + response[1].data.message + response[2].data.message);\n      }\n    }).catch(error => {\n      console.log(error);\n      Alert('error', 'Error !', 'Server Error.');\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return React.createElement(\"div\", {\n        className: \"skeletor-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Skeleton, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(Skeleton, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }));\n    } else {\n      let _this$state = this.state,\n          testdetails = _this$state.testdetails,\n          id = _this$state.id;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Tabs, {\n        defaultActiveKey: \"1\",\n        onChange: e => this.tabChange(e),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(TabPane, {\n        tab: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"home\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }), \"Details\"),\n        key: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Descriptions, {\n        bordered: true,\n        title: \"\",\n        border: true,\n        size: \"small\",\n        column: {\n          xxl: 1,\n          xl: 1,\n          lg: 1,\n          md: 1,\n          sm: 1,\n          xs: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Descriptions.Item, {\n        label: \"Test Id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, this.props.trainer.DataActiveTestDetails.testDetailsId), React.createElement(Descriptions.Item, {\n        label: \"Test Link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Input, {\n        disabled: true,\n        value: \"\".concat(this.state.mainlink, \"user/conducttest?testid=\").concat(id),\n        addonAfter: React.createElement(CopyToClipboard, {\n          text: \"\".concat(this.state.mainlink, \"user/conducttest?testid=\").concat(id),\n          onCopy: () => message.success('Link Copied to clipboard'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"copy\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })), React.createElement(Descriptions.Item, {\n        label: \"Test Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, testdetails.title), React.createElement(Descriptions.Item, {\n        label: \"Test Type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, testdetails.type), React.createElement(Descriptions.Item, {\n        label: \"Subject\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, testdetails.subjects.map((tag, i) => {\n        let color = 'geekblue';\n        return React.createElement(Tag, {\n          color: color,\n          key: tag._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, tag.topic.toUpperCase());\n      }))), React.createElement(Descriptions.Item, {\n        label: \"Created on\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, moment(testdetails.createdAt).format(\"DD/ MM/YYYY\")))), testdetails.testconducted ? React.createElement(TabPane, {\n        tab: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"question-circle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }), \"Questions\"),\n        key: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(Questions, {\n        id: this.props.trainer.DataActiveTestDetails.testDetailsId,\n        questionsOfTest: this.props.trainer.DataActiveTestDetails.testquestions,\n        updateQuestiosnTest: this.props.updateQuestiosnActiveTest,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })) : null, testdetails.testconducted ? React.createElement(TabPane, {\n        tab: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"user\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }), \"Trainees\"),\n        key: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Trainee, {\n        maxmMarks: this.state.maxMarks,\n        id: this.state.id,\n        stats: this.state.stats,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })) : null, testdetails.testconducted ? React.createElement(TabPane, {\n        tab: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"pie-chart\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }), \"Statistics\"),\n        key: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Stats, {\n        id: this.state.id,\n        stats: this.state.stats,\n        file: this.state.file,\n        maxmMarks: this.state.maxMarks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      })) : null, testdetails.testconducted ? React.createElement(TabPane, {\n        tab: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }), \"Feedbacks\"),\n        key: \"5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(FeedBacks, {\n        feedbacks: this.state.feedbacks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })) : null));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  trainer: state.trainer\n});\n\nexport default connect(mapStateToProps, {\n  updateQuestiosnActiveTest\n})(TestDetails);","map":{"version":3,"sources":["D:\\Online-Examination-System-master\\Online-Examination-System-master\\frontend\\src\\components\\trainer\\testdetails\\testdetails.js"],"names":["React","Component","Tabs","Icon","Descriptions","Skeleton","Tag","Input","message","connect","Questions","updateQuestiosnActiveTest","SecurePost","apis","moment","Alert","CopyToClipboard","Stats","Trainee","FeedBacks","TabPane","TestDetails","constructor","props","tabChange","key","console","log","state","id","trainer","DataActiveTestDetails","testDetailsId","testdetails","stats","file","loading","maxMarks","mainlink","feedbacks","componentDidMount","link","window","location","href","split","splice","forEach","d","i","setState","p1","url","GET_SINGLE_TEST","data","p2","GET_STATS","testid","p3","GET_EXCEL","p4","MAX_MARKS_FETCH","p5","GET_FEEDBACKS","Promise","all","then","response","success","catch","error","render","e","xxl","xl","lg","md","sm","xs","title","type","subjects","map","tag","color","_id","topic","toUpperCase","createdAt","format","testconducted","testquestions","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Tabs, Icon, Descriptions,Skeleton, Tag, Input ,message} from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport './testdetails.css';\r\nimport Questions from '../conducttest/questions'\r\nimport {updateQuestiosnActiveTest } from '../../../actions/trainerAction';\r\nimport { SecurePost } from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport moment from 'moment';\r\nimport  Alert  from '../../common/alert';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport Stats from './stats';\r\nimport Trainee from './trainee';\r\nimport FeedBacks from './feedbacks'\r\nconst { TabPane } = Tabs;\r\n\r\n\r\nclass TestDetails extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            id:this.props.trainer.DataActiveTestDetails.testDetailsId,\r\n            testdetails:null,\r\n            stats:null,\r\n            file:null,\r\n            loading:true,\r\n            maxMarks:0,\r\n            mainlink:'',\r\n            feedbacks:[]\r\n        }\r\n        \r\n    }\r\n\r\n    tabChange = (key)=>{\r\n        console.log(key)\r\n    }\r\n    componentDidMount(){\r\n        var link = window.location.href.split('/').splice(0,3);\r\n        var mainlink=\"\";\r\n        link.forEach((d,i)=>{\r\n            mainlink=mainlink+d+\"/\"\r\n        });\r\n        this.setState({mainlink});\r\n        var p1 = SecurePost({\r\n            url:`${apis.GET_SINGLE_TEST}`,\r\n            data:{\r\n                id:this.state.id\r\n            }\r\n        })\r\n        var p2 = SecurePost({\r\n            url:apis.GET_STATS,\r\n            data:{\r\n                testid:this.state.id\r\n            }\r\n        })\r\n\r\n        var p3 = SecurePost({\r\n            url:apis.GET_EXCEL,\r\n            data:{\r\n                id:this.state.id\r\n            }\r\n        })\r\n        var p4 = SecurePost({\r\n            url:apis.MAX_MARKS_FETCH,\r\n            data:{\r\n                testid:this.state.id\r\n            }\r\n        })\r\n        var p5=SecurePost({\r\n            url:apis.GET_FEEDBACKS,\r\n            data:{\r\n                testid:this.state.id\r\n            }\r\n        })\r\n        Promise.all([p1,p2,p3,p4,p5]).then((response)=>{\r\n            console.log(response)\r\n            if(response[0].data.success && response[1].data.success && response[2].data.success && response[3].data.success&& response[4].data.success){\r\n                this.setState({\r\n                    testdetails:response[0].data.data,\r\n                    stats:response[1].data.data,\r\n                    file:response[2].data.file,\r\n                    maxMarks:response[3].data.data,\r\n                    loading:false,\r\n                    feedbacks:response[4].data.data\r\n                })\r\n            }\r\n            else{\r\n                Alert('error','Error !',response[0].data.message +response[1].data.message+response[2].data.message)\r\n            }\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n            Alert('error','Error !','Server Error.')\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading){\r\n            return(\r\n                <div className=\"skeletor-wrapper\">\r\n                    <Skeleton active />\r\n                    <Skeleton active />\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            let { testdetails,id }=this.state;      \r\n            return (\r\n                <div>\r\n                    <Tabs defaultActiveKey=\"1\" onChange={ (e)=>this.tabChange(e)}>\r\n                        <TabPane tab={ <span><Icon type=\"home\" />Details</span> } key=\"1\">\r\n                            <Descriptions bordered title=\"\" border size=\"small\" column={{ xxl: 1, xl: 1, lg: 1, md: 1, sm: 1, xs: 1 }}>\r\n                                <Descriptions.Item label=\"Test Id\">{this.props.trainer.DataActiveTestDetails.testDetailsId}</Descriptions.Item>\r\n                                <Descriptions.Item label=\"Test Link\"><Input disabled={true} value={`${this.state.mainlink}user/conducttest?testid=${id}`} addonAfter={<CopyToClipboard text={`${this.state.mainlink}user/conducttest?testid=${id}`} onCopy={()=>message.success('Link Copied to clipboard')}><Icon type=\"copy\"/></CopyToClipboard>}/></Descriptions.Item>\r\n                                <Descriptions.Item label=\"Test Name\">{testdetails.title}</Descriptions.Item>\r\n                                <Descriptions.Item label=\"Test Type\">{testdetails.type}</Descriptions.Item>\r\n                                <Descriptions.Item label=\"Subject\">\r\n                                    <span>\r\n                                    {testdetails.subjects.map((tag,i) => {\r\n                                        let color ='geekblue';\r\n                                        return (\r\n                                        <Tag color={color} key={tag._id}>\r\n                                            {tag.topic.toUpperCase()}\r\n                                        </Tag>\r\n                                        );\r\n                                    })}\r\n                                    </span></Descriptions.Item>\r\n                                <Descriptions.Item label=\"Created on\">{moment(testdetails.createdAt).format(\"DD/ MM/YYYY\")}</Descriptions.Item>\r\n                            </Descriptions>\r\n                        </TabPane>\r\n                        {testdetails.testconducted?\r\n                            <TabPane tab={ <span><Icon type=\"question-circle\" />Questions</span> } key=\"2\">\r\n                                <Questions id={this.props.trainer.DataActiveTestDetails.testDetailsId} questionsOfTest={this.props.trainer.DataActiveTestDetails.testquestions} updateQuestiosnTest={this.props.updateQuestiosnActiveTest}/>\r\n                            </TabPane>\r\n                        :null}\r\n                        {testdetails.testconducted?\r\n                            <TabPane tab={ <span><Icon type=\"user\" />Trainees</span> } key=\"3\">\r\n                                <Trainee maxmMarks={this.state.maxMarks} id={this.state.id} stats={this.state.stats}/>\r\n                            </TabPane>\r\n                        :null}\r\n                        {testdetails.testconducted?\r\n                            <TabPane tab={ <span><Icon type=\"pie-chart\" />Statistics</span> } key=\"4\">\r\n                                <Stats id={this.state.id} stats={this.state.stats} file={this.state.file} maxmMarks={this.state.maxMarks}/>\r\n                            </TabPane>\r\n                        :null}\r\n                        {testdetails.testconducted?\r\n                            <TabPane tab={ <span><Icon type=\"message\" />Feedbacks</span> } key=\"5\">\r\n                               <FeedBacks feedbacks={this.state.feedbacks}/>\r\n                            </TabPane>\r\n                        :null}\r\n                    </Tabs>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    trainer : state.trainer\r\n});\r\n\r\nexport default connect(mapStateToProps,{\r\n    updateQuestiosnActiveTest\r\n})(TestDetails);\r\n"]},"metadata":{},"sourceType":"module"}