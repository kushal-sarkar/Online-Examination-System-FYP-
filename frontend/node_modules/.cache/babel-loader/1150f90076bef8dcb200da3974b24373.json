{"ast":null,"code":"import _objectSpread from \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\src\\\\components\\\\trainer\\\\alltests\\\\alltest.js\";\nimport React, { Component } from 'react';\nimport { Table, Input, Button, Icon, Typography, Modal, Tag } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { ChangeTestSearchText, ChangeTestTableData, ChangeTestDetailsModalState } from '../../../actions/trainerAction';\nimport './alltest.css';\nimport moment from 'moment';\nimport TestDetails from '../testdetails/testdetails';\n\nclass AllTests extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.openModal = id => {\n      this.props.ChangeTestDetailsModalState(true, id);\n    };\n\n    this.closeModal = () => {\n      this.props.ChangeTestDetailsModalState(false, null);\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => React.createElement(\"div\", {\n        style: {\n          padding: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(Input, {\n        ref: node => {\n          this.searchInput = node;\n        },\n        placeholder: \"Search \".concat(dataIndex),\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: () => this.handleSearch(selectedKeys, confirm),\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: 'block'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        onClick: () => this.handleSearch(selectedKeys, confirm),\n        icon: \"search\",\n        size: \"small\",\n        style: {\n          width: 90,\n          marginRight: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Search\"), React.createElement(Button, {\n        onClick: () => this.handleReset(clearFilters),\n        size: \"small\",\n        style: {\n          width: 90\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Reset\")),\n      filterIcon: filtered => React.createElement(Icon, {\n        type: \"search\",\n        style: {\n          color: filtered ? '#1890ff' : undefined\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select());\n        }\n      },\n      render: text => React.createElement(Highlighter, {\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [this.props.trainer.TestsearchText],\n        autoEscape: true,\n        textToHighlight: text.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })\n    });\n\n    this.handleSearch = (selectedKeys, confirm) => {\n      confirm();\n      this.props.ChangeTestSearchText(selectedKeys[0]);\n    };\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.props.ChangeTestSearchText('');\n    };\n  }\n\n  componentDidMount() {\n    this.props.ChangeTestTableData();\n  }\n\n  render() {\n    const Title = Typography.Title;\n    const columns = [_objectSpread({\n      title: 'Name',\n      dataIndex: 'title',\n      key: 'title'\n    }, this.getColumnSearchProps('title')), _objectSpread({\n      title: 'Type',\n      dataIndex: 'type',\n      key: 'type'\n    }, this.getColumnSearchProps('type')), {\n      title: 'Subjects',\n      dataIndex: 'subjects',\n      key: 'subjects._id',\n      render: tags => React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, tags.map((tag, i) => {\n        let color = 'geekblue';\n        return React.createElement(Tag, {\n          color: color,\n          key: tag._id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, tag.topic.toUpperCase());\n      }))\n    }, _objectSpread({\n      title: 'Created on',\n      dataIndex: 'createdAt',\n      key: 'createdAt'\n    }, this.getColumnSearchProps('createdAt'), {\n      render: tags => React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, moment(tags).format(\"DD/ MM/YYYY\"))\n    }), {\n      title: 'Action',\n      key: '_id',\n      dataIndex: '_id',\n      render: key => React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        shape: \"circle\",\n        icon: \"info-circle\",\n        onClick: () => this.openModal(key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }))\n    }];\n    return React.createElement(\"div\", {\n      className: \"admin-table-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-trainer-form-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Title, {\n      level: 4,\n      style: {\n        color: '#fff',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"List of Tests\")), React.createElement(Table, {\n      bordered: true,\n      columns: columns,\n      dataSource: this.props.trainer.TestTableData,\n      size: \"medium\",\n      pagination: {\n        pageSize: 5\n      },\n      loading: this.props.trainer.TestTableLoading,\n      rowKey: \"_id\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), \";\", React.createElement(Modal, {\n      visible: this.props.trainer.TestDetailsmodalOpened,\n      title: \"Test details\",\n      onOk: this.handleOk,\n      onCancel: this.closeModal,\n      afterClose: this.closeModal,\n      style: {\n        top: '20px',\n        padding: '0px',\n        backgroundColor: 'rgb(155,175,190)'\n      },\n      width: \"90%\",\n      destroyOnClose: true,\n      footer: [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(TestDetails, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  trainer: state.trainer\n});\n\nexport default connect(mapStateToProps, {\n  ChangeTestSearchText,\n  ChangeTestTableData,\n  ChangeTestDetailsModalState\n})(AllTests);","map":{"version":3,"sources":["D:\\Online-Examination-System-master\\Online-Examination-System-master\\frontend\\src\\components\\trainer\\alltests\\alltest.js"],"names":["React","Component","Table","Input","Button","Icon","Typography","Modal","Tag","Highlighter","connect","ChangeTestSearchText","ChangeTestTableData","ChangeTestDetailsModalState","moment","TestDetails","AllTests","openModal","id","props","closeModal","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","node","searchInput","e","target","value","handleSearch","width","marginBottom","display","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","backgroundColor","trainer","TestsearchText","componentDidMount","Title","columns","title","key","tags","map","tag","i","_id","topic","toUpperCase","format","textAlign","TestTableData","pageSize","TestTableLoading","TestDetailsmodalOpened","handleOk","top","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,IAA/B,EAAqCC,UAArC,EAAiDC,KAAjD,EAAuDC,GAAvD,QAAoE,MAApE;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACIC,oBADJ,EAEIC,mBAFJ,EAGIC,2BAHJ,QAIO,gCAJP;AAKA,OAAO,eAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,WAAP,MAAwB,4BAAxB;;AAKA,MAAMC,QAAN,SAAuBf,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SAE7BgB,SAF6B,GAEhBC,EAAD,IAAM;AACd,WAAKC,KAAL,CAAWN,2BAAX,CAAuC,IAAvC,EAA4CK,EAA5C;AACH,KAJ4B;;AAAA,SAM7BE,UAN6B,GAMhB,MAAI;AACb,WAAKD,KAAL,CAAWN,2BAAX,CAAuC,KAAvC,EAA6C,IAA7C;AACH,KAR4B;;AAAA,SAa7BQ,oBAb6B,GAaNC,SAAS,KAAK;AACjCC,MAAAA,cAAc,EAAE,CAAC;AAAEC,QAAAA,eAAF;AAAmBC,QAAAA,YAAnB;AAAiCC,QAAAA,OAAjC;AAA0CC,QAAAA;AAA1C,OAAD,KACd;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,GAAG,EAAEC,IAAI,IAAI;AACX,eAAKC,WAAL,GAAmBD,IAAnB;AACD,SAHH;AAIE,QAAA,WAAW,mBAAYP,SAAZ,CAJb;AAKE,QAAA,KAAK,EAAEG,YAAY,CAAC,CAAD,CALrB;AAME,QAAA,QAAQ,EAAEM,CAAC,IAAIP,eAAe,CAACO,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiB,CAACF,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB,GAAoC,EAArC,CANhC;AAOE,QAAA,YAAY,EAAE,MAAM,KAAKC,YAAL,CAAkBT,YAAlB,EAAgCC,OAAhC,CAPtB;AAQE,QAAA,KAAK,EAAE;AAAES,UAAAA,KAAK,EAAE,GAAT;AAAcC,UAAAA,YAAY,EAAE,CAA5B;AAA+BC,UAAAA,OAAO,EAAE;AAAxC,SART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAWE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKH,YAAL,CAAkBT,YAAlB,EAAgCC,OAAhC,CAFjB;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,KAAK,EAAE;AAAES,UAAAA,KAAK,EAAE,EAAT;AAAaG,UAAAA,WAAW,EAAE;AAA1B,SALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXF,EAoBE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKC,WAAL,CAAiBZ,YAAjB,CAAvB;AAAuD,QAAA,IAAI,EAAC,OAA5D;AAAoE,QAAA,KAAK,EAAE;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBApBF,CAF+B;AA2BjCK,MAAAA,UAAU,EAAEC,QAAQ,IAClB,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,QAAX;AAAoB,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAED,QAAQ,GAAG,SAAH,GAAeE;AAAhC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5B+B;AA8BjCC,MAAAA,QAAQ,EAAE,CAACX,KAAD,EAAQY,MAAR,KACRA,MAAM,CAACvB,SAAD,CAAN,CACGwB,QADH,GAEGC,WAFH,GAGGC,QAHH,CAGYf,KAAK,CAACc,WAAN,EAHZ,CA/B+B;AAmCjCE,MAAAA,6BAA6B,EAAEC,OAAO,IAAI;AACxC,YAAIA,OAAJ,EAAa;AACXC,UAAAA,UAAU,CAAC,MAAM,KAAKrB,WAAL,CAAiBsB,MAAjB,EAAP,CAAV;AACD;AACF,OAvCgC;AAwCjCC,MAAAA,MAAM,EAAEC,IAAI,IACV,oBAAC,WAAD;AACE,QAAA,cAAc,EAAE;AAAEC,UAAAA,eAAe,EAAE,SAAnB;AAA8B3B,UAAAA,OAAO,EAAE;AAAvC,SADlB;AAEE,QAAA,WAAW,EAAE,CAAC,KAAKT,KAAL,CAAWqC,OAAX,CAAmBC,cAApB,CAFf;AAGE,QAAA,UAAU,MAHZ;AAIE,QAAA,eAAe,EAAEH,IAAI,CAACR,QAAL,EAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzC+B,KAAL,CAbH;;AAAA,SA+D3BZ,YA/D2B,GA+DZ,CAACT,YAAD,EAAeC,OAAf,KAA2B;AACxCA,MAAAA,OAAO;AACP,WAAKP,KAAL,CAAWR,oBAAX,CAAgCc,YAAY,CAAC,CAAD,CAA5C;AACD,KAlE0B;;AAAA,SAoE3Bc,WApE2B,GAoEbZ,YAAY,IAAI;AAC5BA,MAAAA,YAAY;AACZ,WAAKR,KAAL,CAAWR,oBAAX,CAAgC,EAAhC;AACD,KAvE0B;AAAA;;AAS7B+C,EAAAA,iBAAiB,GAAE;AACjB,SAAKvC,KAAL,CAAWP,mBAAX;AACD;;AA8DDyC,EAAAA,MAAM,GAAG;AAAA,UACCM,KADD,GACWrD,UADX,CACCqD,KADD;AAEP,UAAMC,OAAO,GAAG;AAEZC,MAAAA,KAAK,EAAE,MAFK;AAGZvC,MAAAA,SAAS,EAAE,OAHC;AAIZwC,MAAAA,GAAG,EAAE;AAJO,OAKT,KAAKzC,oBAAL,CAA0B,OAA1B,CALS;AAQZwC,MAAAA,KAAK,EAAE,MARK;AASZvC,MAAAA,SAAS,EAAE,MATC;AAUZwC,MAAAA,GAAG,EAAE;AAVO,OAWT,KAAKzC,oBAAL,CAA0B,MAA1B,CAXS,GAad;AACEwC,MAAAA,KAAK,EAAE,UADT;AAEEvC,MAAAA,SAAS,EAAE,UAFb;AAGEwC,MAAAA,GAAG,EAAE,cAHP;AAIET,MAAAA,MAAM,EAAEU,IAAI,IACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,IAAI,CAACC,GAAL,CAAS,CAACC,GAAD,EAAKC,CAAL,KAAW;AACnB,YAAIxB,KAAK,GAAE,UAAX;AACA,eACE,oBAAC,GAAD;AAAK,UAAA,KAAK,EAAEA,KAAZ;AAAmB,UAAA,GAAG,EAAEuB,GAAG,CAACE,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGF,GAAG,CAACG,KAAJ,CAAUC,WAAV,EADH,CADF;AAKD,OAPA,CADH;AALJ,KAbc;AA+BZR,MAAAA,KAAK,EAAE,YA/BK;AAgCZvC,MAAAA,SAAS,EAAE,WAhCC;AAiCZwC,MAAAA,GAAG,EAAE;AAjCO,OAkCT,KAAKzC,oBAAL,CAA0B,WAA1B,CAlCS;AAmCZgC,MAAAA,MAAM,EAAEU,IAAI,IACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGjD,MAAM,CAACiD,IAAD,CAAN,CAAaO,MAAb,CAAoB,aAApB,CADH;AApCU,QAyCd;AACET,MAAAA,KAAK,EAAE,QADT;AAEEC,MAAAA,GAAG,EAAE,KAFP;AAGExC,MAAAA,SAAS,EAAE,KAHb;AAIE+B,MAAAA,MAAM,EAAGS,GAAD,IACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,KAAK,EAAC,QAA7B;AAAsC,QAAA,IAAI,EAAC,aAA3C;AAAyD,QAAA,OAAO,EAAE,MAAI,KAAK7C,SAAL,CAAe6C,GAAf,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AALJ,KAzCc,CAAhB;AAoDE,WACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,CAAd;AAAiB,MAAA,KAAK,EAAE;AAACpB,QAAAA,KAAK,EAAC,MAAP;AAAc6B,QAAAA,SAAS,EAAC;AAAxB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CADF,EAIE,oBAAC,KAAD;AACE,MAAA,QAAQ,EAAE,IADZ;AAEE,MAAA,OAAO,EAAEX,OAFX;AAGE,MAAA,UAAU,EAAE,KAAKzC,KAAL,CAAWqC,OAAX,CAAmBgB,aAHjC;AAIE,MAAA,IAAI,EAAC,QAJP;AAKE,MAAA,UAAU,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OALd;AAME,MAAA,OAAO,EAAE,KAAKtD,KAAL,CAAWqC,OAAX,CAAmBkB,gBAN9B;AAOE,MAAA,MAAM,EAAC,KAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,OAaE,oBAAC,KAAD;AACE,MAAA,OAAO,EAAE,KAAKvD,KAAL,CAAWqC,OAAX,CAAmBmB,sBAD9B;AAEE,MAAA,KAAK,EAAC,cAFR;AAGE,MAAA,IAAI,EAAE,KAAKC,QAHb;AAIE,MAAA,QAAQ,EAAE,KAAKxD,UAJjB;AAKE,MAAA,UAAU,EAAE,KAAKA,UALnB;AAME,MAAA,KAAK,EAAE;AAACyD,QAAAA,GAAG,EAAE,MAAN;AAAajD,QAAAA,OAAO,EAAC,KAArB;AAA2B2B,QAAAA,eAAe,EAAC;AAA3C,OANT;AAOE,MAAA,KAAK,EAAC,KAPR;AAQE,MAAA,cAAc,EAAE,IARlB;AASE,MAAA,MAAM,EAAE,EATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAaE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CAbF,CADJ;AA+BH;;AA9J4B;;AAiKjC,MAAMuB,eAAe,GAAGC,KAAK,KAAK;AAC9BvB,EAAAA,OAAO,EAAGuB,KAAK,CAACvB;AADc,CAAL,CAA7B;;AAIA,eAAe9C,OAAO,CAACoE,eAAD,EAAiB;AACnCnE,EAAAA,oBADmC;AAEnCC,EAAAA,mBAFmC;AAGnCC,EAAAA;AAHmC,CAAjB,CAAP,CAIZG,QAJY,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Input, Button, Icon, Typography, Modal,Tag   } from 'antd';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    ChangeTestSearchText,\r\n    ChangeTestTableData,\r\n    ChangeTestDetailsModalState\r\n} from '../../../actions/trainerAction';\r\nimport './alltest.css';\r\nimport moment from 'moment';\r\n\r\nimport TestDetails from '../testdetails/testdetails';\r\n\r\n\r\n\r\n\r\nclass AllTests extends Component {\r\n\r\n    openModal = (id)=>{\r\n        this.props.ChangeTestDetailsModalState(true,id);\r\n    }\r\n    \r\n    closeModal = ()=>{\r\n        this.props.ChangeTestDetailsModalState(false,null);\r\n    }\r\n    componentDidMount(){\r\n      this.props.ChangeTestTableData();\r\n    }\r\n\r\n    getColumnSearchProps = dataIndex => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n          <div style={{ padding: 8 }}>\r\n            <Input\r\n              ref={node => {\r\n                this.searchInput = node;\r\n              }}\r\n              placeholder={`Search ${dataIndex}`}\r\n              value={selectedKeys[0]}\r\n              onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n              onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\r\n              style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => this.handleSearch(selectedKeys, confirm)}\r\n              icon=\"search\"\r\n              size=\"small\"\r\n              style={{ width: 90, marginRight: 8 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        ),\r\n        filterIcon: filtered => (\r\n          <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\r\n        ),\r\n        onFilter: (value, record) =>\r\n          record[dataIndex]\r\n            .toString()\r\n            .toLowerCase()\r\n            .includes(value.toLowerCase()),\r\n        onFilterDropdownVisibleChange: visible => {\r\n          if (visible) {\r\n            setTimeout(() => this.searchInput.select());\r\n          }\r\n        },\r\n        render: text => (\r\n          <Highlighter\r\n            highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n            searchWords={[this.props.trainer.TestsearchText]}\r\n            autoEscape\r\n            textToHighlight={text.toString()}\r\n          />\r\n        ),\r\n      });\r\n    \r\n      handleSearch = (selectedKeys, confirm) => {\r\n        confirm();\r\n        this.props.ChangeTestSearchText(selectedKeys[0])\r\n      };\r\n    \r\n      handleReset = clearFilters => {\r\n        clearFilters();\r\n        this.props.ChangeTestSearchText('')\r\n      };\r\n\r\n    render() {\r\n      const { Title } = Typography;\r\n      const columns = [\r\n        {\r\n          title: 'Name',\r\n          dataIndex: 'title',\r\n          key: 'title',\r\n          ...this.getColumnSearchProps('title'),\r\n        },\r\n        {\r\n          title: 'Type',\r\n          dataIndex: 'type',\r\n          key: 'type',\r\n          ...this.getColumnSearchProps('type'),\r\n        },\r\n        {\r\n          title: 'Subjects',\r\n          dataIndex: 'subjects',\r\n          key: 'subjects._id',\r\n          render: tags => (\r\n            <span>\r\n              {tags.map((tag,i) => {\r\n                let color ='geekblue';\r\n                return (\r\n                  <Tag color={color} key={tag._id}>\r\n                    {tag.topic.toUpperCase()}\r\n                  </Tag>\r\n                );\r\n              })}\r\n            </span>\r\n          )\r\n        },\r\n        {\r\n          title: 'Created on',\r\n          dataIndex: 'createdAt',\r\n          key: 'createdAt',\r\n          ...this.getColumnSearchProps('createdAt'),\r\n          render: tags => (\r\n            <span>\r\n              {moment(tags).format(\"DD/ MM/YYYY\")}\r\n            </span>\r\n          )\r\n        },\r\n        {\r\n          title: 'Action',\r\n          key: '_id',\r\n          dataIndex: '_id',\r\n          render: (key) => (\r\n            <span>\r\n              <Button type=\"primary\" shape=\"circle\" icon=\"info-circle\" onClick={()=>this.openModal(key)}/>\r\n            </span>\r\n          ),\r\n        },\r\n      ];\r\n        return (\r\n            <div className=\"admin-table-container\">\r\n              <div className=\"register-trainer-form-header\">\r\n                <Title level={4} style={{color:'#fff',textAlign:'center'}}>List of Tests</Title>\r\n              </div>\r\n              <Table \r\n                bordered={true} \r\n                columns={columns} \r\n                dataSource={this.props.trainer.TestTableData} \r\n                size=\"medium\" \r\n                pagination={{ pageSize: 5 }}\r\n                loading={this.props.trainer.TestTableLoading}\r\n                rowKey=\"_id\" \r\n              />;\r\n              <Modal\r\n                visible={this.props.trainer.TestDetailsmodalOpened}\r\n                title=\"Test details\"\r\n                onOk={this.handleOk}\r\n                onCancel={this.closeModal}\r\n                afterClose={this.closeModal}\r\n                style={{top :'20px',padding:'0px',backgroundColor:'rgb(155,175,190)'}}\r\n                width=\"90%\"\r\n                destroyOnClose={true}\r\n                footer={[\r\n                  \r\n                ]}\r\n              >\r\n                <TestDetails />\r\n              </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    trainer : state.trainer\r\n});\r\n\r\nexport default connect(mapStateToProps,{\r\n    ChangeTestSearchText,\r\n    ChangeTestTableData,\r\n    ChangeTestDetailsModalState\r\n})(AllTests);"]},"metadata":{},"sourceType":"module"}