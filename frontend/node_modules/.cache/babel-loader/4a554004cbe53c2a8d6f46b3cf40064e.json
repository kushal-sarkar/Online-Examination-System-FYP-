{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\src\\\\components\\\\trainer\\\\newtest\\\\generaterandomquestion.js\";\nimport React, { Component } from 'react';\nimport { Button, Skeleton, Modal, Form, InputNumber, Transfer, Row, Col } from 'antd';\nimport { connect } from 'react-redux';\nimport { changeStep, changeMode, removeQuestionFromMainQueue, changeBasicNewTestDetails, fetchSubjectWiseQuestion, pushQuestionToQueue } from '../../../actions/testAction';\nimport './newtest.css';\nimport Alert from '../../common/alert';\nimport apis from '../../../services/Apis';\nimport { Post } from '../../../services/axiosCall';\n\nclass GeneraterandomQuestionO extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log(values);\n\n          if (values.no <= this.props.test.questionsAvailablebasedonSubject.length) {\n            var qus = [];\n            var allquestions = [...this.props.test.questionsAvailablebasedonSubject];\n            var l = allquestions.length - 1;\n\n            for (var i = values.no; i > 0; i--) {\n              l = l - 1;\n              var r = Math.floor(Math.random() * l);\n              qus.push(allquestions[r]._id);\n              allquestions.splice(r, 1);\n            }\n\n            this.props.pushQuestionToQueue(qus);\n            this.setState({\n              autogenerate: false\n            });\n          } else {\n            Alert('error', 'Error!', \"You don't have enough questions to select.\");\n          }\n        }\n      });\n    };\n\n    this.renderItem = item => {\n      const customLabel = React.createElement(\"span\", {\n        className: \"custom-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(Button, {\n        shape: \"circle\",\n        onClick: () => {\n          this.OpenModel(item._id);\n        },\n        icon: \"info\",\n        style: {\n          background: 'linear-gradient(to right,rgb(80,190,189),rgb(0,153,153),rgb(0,153,203))',\n          color: 'greenblue'\n        },\n        size: \"small\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), item.body);\n      return {\n        label: customLabel,\n        value: item._id\n      };\n    };\n\n    this.OpenModel = qid => {\n      this.setState({\n        ActiveQuestionId: qid,\n        Mvisible: true\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        Mvisible: false\n      });\n    };\n\n    this.handleChange = (targetKeys, direction, moveKeys) => {\n      this.props.pushQuestionToQueue(targetKeys);\n    };\n\n    this.state = {\n      generating: false,\n      autogenerate: true,\n      ActiveQuestionId: null,\n      Mvisible: false\n    };\n    this.props.changeMode(this.props.mode);\n  }\n\n  componentDidMount() {\n    this.props.fetchSubjectWiseQuestion(this.props.test.newtestFormData.testSubject);\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 5,\n      style: {\n        padding: '20px 0px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"random-question-generation \".concat(this.props.mode === \"random\" ? \"notblind\" : \"blind\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Enter No. of questions\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, getFieldDecorator('no', {\n      rules: [{\n        required: true,\n        message: 'Please enter no. of question'\n      }]\n    })(React.createElement(InputNumber, {\n      style: {\n        width: '100%'\n      },\n      placeholder: \"No of question\",\n      min: 10,\n      max: 50,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"default\",\n      htmlType: \"submit\",\n      block: true,\n      disabled: !this.state.autogenerate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Generate Test Paper\"))))), React.createElement(Col, {\n      span: 19,\n      style: {\n        padding: '20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Transfer, {\n      disabled: this.props.mode === \"random\" ? true : false,\n      rowKey: record => record._id,\n      dataSource: this.props.test.questionsAvailablebasedonSubject,\n      listStyle: {\n        width: '45%',\n        height: 500\n      },\n      targetKeys: this.props.test.newtestFormData.testQuestions,\n      render: this.renderItem,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))), React.createElement(Modal, {\n      destroyOnClose: true,\n      width: \"70%\",\n      style: {\n        top: '30px'\n      },\n      title: \"Question details\",\n      visible: this.state.Mvisible,\n      onOk: this.handleCancel,\n      onCancel: this.handleCancel,\n      footer: null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(SingleQuestionDetails, {\n      qid: this.state.ActiveQuestionId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst GeneraterandomQuestion = Form.create({\n  name: 'Basic Form'\n})(GeneraterandomQuestionO);\n\nconst mapStateToProps = state => ({\n  test: state.test\n});\n\nexport default connect(mapStateToProps, {\n  changeStep,\n  changeBasicNewTestDetails,\n  fetchSubjectWiseQuestion,\n  pushQuestionToQueue,\n  removeQuestionFromMainQueue,\n  changeMode\n})(GeneraterandomQuestion);\n\nclass SingleQuestionDetails extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fetching: false,\n      qdetails: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      fetching: true\n    });\n    Post({\n      url: apis.FETCH_SINGLE_QUESTION_BY_TRAINEE,\n      data: {\n        qid: this.props.qid\n      }\n    }).then(response => {\n      console.log(response);\n\n      if (response.data.success) {\n        this.setState({\n          qdetails: response.data.data[0]\n        });\n      } else {\n        Alert('error', 'Error !', response.data.message);\n      }\n\n      this.setState({\n        fetching: false\n      });\n    }).catch(error => {\n      this.setState({\n        fetching: false\n      });\n      console.log(error);\n      Alert('error', 'Error !', \"Server Error\");\n    });\n  }\n\n  render() {\n    const optn = ['A', 'B', 'C', 'D', 'E'];\n    let Optiondata = this.state.qdetails;\n\n    if (Optiondata !== null) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mainQuestionDetailsContaine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"questionDetailsBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, Optiondata.body), Optiondata.quesimg ? React.createElement(\"div\", {\n        className: \"questionDetailsImageContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: \"Question\",\n        className: \"questionDetailsImage\",\n        src: Optiondata.quesimg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      })) : null, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, Optiondata.options.map((d, i) => {\n        return React.createElement(\"div\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, React.createElement(Row, {\n          type: \"flex\",\n          justify: \"center\",\n          className: \"QuestionDetailsOptions\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }, React.createElement(Col, {\n          span: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, d.isAnswer ? React.createElement(Button, {\n          className: \"green\",\n          shape: \"circle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, optn[i]) : React.createElement(Button, {\n          type: \"primary\",\n          shape: \"circle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, optn[i])), d.optimg ? React.createElement(Col, {\n          span: 6,\n          style: {\n            padding: '5px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          alt: \"options\",\n          className: \"questionDetailsImage\",\n          src: d.optimg,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        })) : null, d.optimg ? React.createElement(Col, {\n          span: 14,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        }, d.optbody) : React.createElement(Col, {\n          span: 20,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, d.optbody)));\n      }))));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"skeletor-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(Skeleton, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }), React.createElement(Skeleton, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }));\n    }\n  }\n\n}","map":{"version":3,"sources":["D:\\Online-Examination-System-master\\Online-Examination-System-master\\frontend\\src\\components\\trainer\\newtest\\generaterandomquestion.js"],"names":["React","Component","Button","Skeleton","Modal","Form","InputNumber","Transfer","Row","Col","connect","changeStep","changeMode","removeQuestionFromMainQueue","changeBasicNewTestDetails","fetchSubjectWiseQuestion","pushQuestionToQueue","Alert","apis","Post","GeneraterandomQuestionO","constructor","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","no","test","questionsAvailablebasedonSubject","length","qus","allquestions","l","i","r","Math","floor","random","push","_id","splice","setState","autogenerate","renderItem","item","customLabel","OpenModel","background","color","body","label","value","qid","ActiveQuestionId","Mvisible","handleCancel","handleChange","targetKeys","direction","moveKeys","state","generating","mode","componentDidMount","newtestFormData","testSubject","render","getFieldDecorator","padding","rules","required","message","width","record","height","testQuestions","top","GeneraterandomQuestion","create","name","mapStateToProps","SingleQuestionDetails","fetching","qdetails","url","FETCH_SINGLE_QUESTION_BY_TRAINEE","data","then","response","success","catch","error","optn","Optiondata","quesimg","options","map","d","isAnswer","optimg","optbody"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Skeleton,Modal,Form,InputNumber,Transfer,Row,Col } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { changeStep,changeMode,removeQuestionFromMainQueue,changeBasicNewTestDetails,fetchSubjectWiseQuestion,pushQuestionToQueue } from '../../../actions/testAction';\r\nimport './newtest.css';\r\nimport Alert from '../../common/alert';\r\nimport apis from '../../../services/Apis';\r\nimport { Post } from '../../../services/axiosCall';\r\n\r\nclass GeneraterandomQuestionO extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            generating:false,\r\n            autogenerate:true,\r\n            ActiveQuestionId:null,\r\n            Mvisible:false\r\n        }\r\n        this.props.changeMode(this.props.mode);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.fetchSubjectWiseQuestion(this.props.test.newtestFormData.testSubject);\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log(values);\r\n                if(values.no<=this.props.test.questionsAvailablebasedonSubject.length){\r\n                    var qus=[];\r\n                    var allquestions=[...this.props.test.questionsAvailablebasedonSubject];\r\n                    var l=allquestions.length-1;\r\n                    for(var i=values.no;i>0;i--){\r\n                        l=l-1;\r\n                        var r = Math.floor(Math.random() * l);\r\n                        qus.push(allquestions[r]._id);\r\n                        allquestions.splice(r,1);\r\n                    }\r\n                    this.props.pushQuestionToQueue(qus);\r\n                    this.setState({\r\n                        autogenerate : false\r\n                    })\r\n                }\r\n                else{\r\n                    Alert('error','Error!',\"You don't have enough questions to select.\" );\r\n                } \r\n            }\r\n        });\r\n    };\r\n\r\n    renderItem = item => {\r\n        const customLabel = (\r\n          <span className=\"custom-item\">\r\n                <Button shape=\"circle\" onClick={()=>{this.OpenModel(item._id)}} icon=\"info\" style={{background:'linear-gradient(to right,rgb(80,190,189),rgb(0,153,153),rgb(0,153,203))',color:'greenblue'}} size=\"small\" ></Button>\r\n                {item.body}\r\n          </span>\r\n        )\r\n        return {\r\n            label: customLabel, \r\n            value: item._id, \r\n        }\r\n    }\r\n\r\n    OpenModel=(qid)=>{\r\n        this.setState({\r\n            ActiveQuestionId:qid,\r\n            Mvisible:true\r\n        })\r\n    }\r\n    handleCancel=()=>{\r\n        this.setState({\r\n            Mvisible:false\r\n        })\r\n    }\r\n\r\n    handleChange = (targetKeys, direction, moveKeys) => {\r\n        this.props.pushQuestionToQueue(targetKeys);\r\n    };\r\n\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <Col span={5} style={{padding:'20px 0px'}}>\r\n                        <div className={`random-question-generation ${this.props.mode ===\"random\"? \"notblind\" : \"blind\"}`}>\r\n                            <Form onSubmit={this.handleSubmit} >\r\n                                <Form.Item label=\"Enter No. of questions\" hasFeedback>\r\n                                    {getFieldDecorator('no', {\r\n                                        rules: [{ required: true, message: 'Please enter no. of question' }],\r\n                                    })(\r\n                                        <InputNumber style={{width:'100%'}}  placeholder=\"No of question\" min={10} max={50}/>\r\n                                    )}\r\n                                </Form.Item> \r\n                                <Form.Item>\r\n                                    <Button type=\"default\" htmlType=\"submit\" block disabled={!this.state.autogenerate}>\r\n                                        Generate Test Paper\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={19} style={{padding:'20px'}}>\r\n                        <Transfer\r\n                            disabled={this.props.mode ===\"random\"? true : false}\r\n                            rowKey={record => record._id}\r\n                            dataSource={this.props.test.questionsAvailablebasedonSubject}\r\n                            listStyle={{\r\n                                width: '45%',\r\n                                height: 500,\r\n                            }}\r\n                            targetKeys={this.props.test.newtestFormData.testQuestions}\r\n                            render={this.renderItem}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Modal\r\n                    destroyOnClose={true}\r\n                    width=\"70%\"\r\n                    style={{top:'30px'}}\r\n                    title=\"Question details\"\r\n                    visible={this.state.Mvisible}\r\n                    onOk={this.handleCancel}\r\n                    onCancel={this.handleCancel}\r\n                    footer={null}\r\n                    >\r\n                    <SingleQuestionDetails qid={this.state.ActiveQuestionId}/>\r\n                </Modal>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst GeneraterandomQuestion = Form.create({ name: 'Basic Form' })(GeneraterandomQuestionO);\r\n\r\nconst mapStateToProps = state => ({\r\n    test : state.test\r\n});\r\n\r\nexport default connect(mapStateToProps,{\r\n    changeStep,\r\n    changeBasicNewTestDetails,\r\n    fetchSubjectWiseQuestion,\r\n    pushQuestionToQueue,\r\n    removeQuestionFromMainQueue,\r\n    changeMode\r\n})(GeneraterandomQuestion);\r\n\r\n\r\n\r\nclass SingleQuestionDetails extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            fetching:false,\r\n            qdetails:null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            fetching:true\r\n        })\r\n        Post({\r\n            url:apis.FETCH_SINGLE_QUESTION_BY_TRAINEE,\r\n            data:{\r\n                qid:this.props.qid\r\n            }\r\n        }).then((response)=>{\r\n            console.log(response)\r\n            if(response.data.success){\r\n                this.setState({\r\n                    qdetails:response.data.data[0]\r\n                })\r\n            }\r\n            else{\r\n                Alert('error','Error !',response.data.message);\r\n            }\r\n            this.setState({\r\n                fetching:false\r\n            })\r\n        }).catch((error)=>{\r\n            this.setState({\r\n                fetching:false\r\n            })\r\n            console.log(error)\r\n            Alert('error','Error !',\"Server Error\");\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        const optn =['A','B','C','D','E'];\r\n        let Optiondata=this.state.qdetails;\r\n        if(Optiondata!==null){\r\n            return (\r\n                <div>\r\n                    <div className=\"mainQuestionDetailsContaine\">\r\n                        <div className=\"questionDetailsBody\">\r\n                            {Optiondata.body}\r\n                        </div>\r\n                        {Optiondata.quesimg?\r\n                            <div className=\"questionDetailsImageContainer\">\r\n                                <img alt=\"Question\" className=\"questionDetailsImage\" src={Optiondata.quesimg} />  \r\n                            </div>\r\n                            : null\r\n                        }\r\n                        <div>\r\n                            {Optiondata.options.map((d,i)=>{\r\n                                return(\r\n                                    <div key={i}>\r\n                                        <Row type=\"flex\" justify=\"center\" className=\"QuestionDetailsOptions\">\r\n                                            <Col span={2}>\r\n                                                {\r\n                                                    d.isAnswer?<Button className=\"green\" shape=\"circle\">{optn[i]}</Button>:<Button type=\"primary\" shape=\"circle\">{optn[i]}</Button>\r\n                                                }\r\n                                                \r\n                                            </Col>\r\n                                            {d.optimg?\r\n                                                <Col span={6} style={{padding:'5px'}}>\r\n                                                    <img alt=\"options\" className=\"questionDetailsImage\" src={d.optimg} />\r\n                                                </Col>\r\n                                            :\r\n                                                null\r\n                                            }\r\n                                            {d.optimg?\r\n                                                <Col span={14}>{d.optbody}</Col>\r\n                                            :\r\n                                                <Col span={20}>{d.optbody}</Col>\r\n                                            }\r\n                                        </Row>\r\n                                    \r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n    \r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"skeletor-wrapper\">\r\n                    <Skeleton active />\r\n                    <Skeleton active />\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}