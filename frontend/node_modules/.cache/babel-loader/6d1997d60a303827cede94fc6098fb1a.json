{"ast":null,"code":"var _jsxFileName = \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\src\\\\components\\\\admin\\\\newTrainer\\\\newtrainer.js\";\nimport React, { Component } from 'react';\nimport './newtrainer.css';\nimport { Form, Input, Button, Select } from 'antd';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport { connect } from 'react-redux';\nimport { ChangeTrainerConfirmDirty, ChangeTrainerModalState, ChangeTrainerTableData } from '../../../actions/adminAction';\nimport Alert from '../../../components/common/alert';\nconst Option = Select.Option;\n\nclass NewTrainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('passwords are not same !');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.props.admin.TrainerconfirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          SecurePost({\n            url: \"\".concat(apis.CREATE_TRAINER),\n            data: {\n              _id: this.props.admin.trainerId,\n              name: values.name,\n              password: values.password,\n              emailid: values.emailid,\n              contact: values.prefix + values.contact\n            }\n          }).then(response => {\n            if (response.data.success) {\n              this.props.ChangeTrainerModalState(false, null, 'Register');\n              Alert('success', 'Success', response.data.message);\n              this.props.ChangeTrainerTableData();\n            } else {\n              console.log(response.data);\n              this.props.ChangeTrainerModalState(false, null, 'Register');\n              return Alert('warning', 'Warning!', response.data.message);\n            }\n          }).catch(error => {\n            this.props.ChangeTrainerModalState(false, null, 'Register');\n            return Alert('error', 'Error!', 'Server Error');\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: this.props.admin.trainerdetails.prefix || '+91',\n      rules: [{\n        required: true,\n        message: 'Please enter contact no prefix'\n      }]\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"+91\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"+91\")));\n    return React.createElement(\"div\", {\n      className: \"register-trainer-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-trainer-form-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Name\",\n      hasFeedback: true,\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, getFieldDecorator('name', {\n      initialValue: this.props.admin.trainerdetails.name,\n      rules: [{\n        required: true,\n        message: 'Please input your name!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }))), !this.props.admin.trainerId ? React.createElement(Form.Item, {\n      label: \"E-mail\",\n      hasFeedback: true,\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, getFieldDecorator('emailid', {\n      initialValue: this.props.admin.trainerdetails.emailid,\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }))) : null, React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, getFieldDecorator('contact', {\n      initialValue: this.props.admin.trainerdetails.contact,\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }, {\n        len: 10,\n        message: 'Contact number must be 10 digit long'\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      min: 10,\n      max: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }))), !this.props.admin.trainerId ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      initialValue: this.props.admin.trainerdetails.password,\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      initialValue: this.props.admin.trainerdetails.confirmpassword,\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })))) : null, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, this.props.admin.Trainermode)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  admin: state.admin\n});\n\nconst NewTrainerForm = Form.create({\n  name: 'register'\n})(NewTrainer);\nexport default connect(mapStateToProps, {\n  ChangeTrainerConfirmDirty,\n  ChangeTrainerModalState,\n  ChangeTrainerTableData\n})(NewTrainerForm);","map":{"version":3,"sources":["D:\\Online-Examination-System-master\\Online-Examination-System-master\\frontend\\src\\components\\admin\\newTrainer\\newtrainer.js"],"names":["React","Component","Form","Input","Button","Select","SecurePost","apis","connect","ChangeTrainerConfirmDirty","ChangeTrainerModalState","ChangeTrainerTableData","Alert","Option","NewTrainer","compareToFirstPassword","rule","value","callback","form","props","getFieldValue","validateToNextPassword","admin","TrainerconfirmDirty","validateFields","force","handleSubmit","e","preventDefault","validateFieldsAndScroll","err","values","console","log","url","CREATE_TRAINER","data","_id","trainerId","name","password","emailid","contact","prefix","then","response","success","message","catch","error","render","getFieldDecorator","prefixSelector","initialValue","trainerdetails","rules","required","width","whitespace","type","len","validator","confirmpassword","handleConfirmBlur","Trainermode","mapStateToProps","state","NewTrainerForm","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './newtrainer.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Select\r\n} from 'antd';\r\nimport {SecurePost} from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    ChangeTrainerConfirmDirty,\r\n    ChangeTrainerModalState,\r\n    ChangeTrainerTableData\r\n} from '../../../actions/adminAction';\r\nimport Alert from '../../../components/common/alert';\r\nconst { Option } = Select;\r\nclass NewTrainer extends Component {\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const form = this.props.form;\r\n        if (value && value !== form.getFieldValue('password')) {\r\n            callback('passwords are not same !');\r\n        } else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const form = this.props.form;\r\n        if (value && this.props.admin.TrainerconfirmDirty) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n    \r\n\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n                \r\n                    SecurePost({\r\n                        url : `${apis.CREATE_TRAINER}`,\r\n                        data : {\r\n                            _id : this.props.admin.trainerId,\r\n                            name :values.name,\r\n                            password : values.password,\r\n                            emailid : values.emailid,\r\n                            contact : values.prefix+values.contact\r\n                        }\r\n                    }).then((response)=>{\r\n                        if(response.data.success){\r\n                            this.props.ChangeTrainerModalState(false,null,'Register');\r\n                            Alert('success','Success',response.data.message);\r\n                            this.props.ChangeTrainerTableData();\r\n                        }\r\n                        else{\r\n                            console.log(response.data);\r\n                            this.props.ChangeTrainerModalState(false,null,'Register');\r\n                            return Alert('warning','Warning!',response.data.message);\r\n                        }\r\n                    }).catch((error)=>{\r\n                        this.props.ChangeTrainerModalState(false,null,'Register');\r\n                        return Alert('error','Error!','Server Error');\r\n                    })\r\n                \r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const prefixSelector = getFieldDecorator('prefix', {\r\n            initialValue: this.props.admin.trainerdetails.prefix || '+91',\r\n            rules: [{ required: true, message: 'Please enter contact no prefix' }],\r\n          })(\r\n            <Select style={{ width: 70 }}>\r\n              <Option value=\"+91\">+91</Option>\r\n            </Select>,\r\n          );\r\n        return (\r\n            <div className=\"register-trainer-form\">\r\n                <div className=\"register-trainer-form-body\">\r\n                    <Form  onSubmit={this.handleSubmit}>\r\n                        <Form.Item label=\"Name\" hasFeedback className=\"input-admin-trainer\">\r\n                            {getFieldDecorator('name', {\r\n                                initialValue : this.props.admin.trainerdetails.name,\r\n                                rules: [{ required: true, message: 'Please input your name!', whitespace: true }],\r\n                            })(<Input />)}\r\n                        </Form.Item>\r\n                    \r\n                        { !this.props.admin.trainerId ? <Form.Item label=\"E-mail\" hasFeedback className=\"input-admin-trainer\">\r\n                            {getFieldDecorator('emailid', {\r\n                                initialValue : this.props.admin.trainerdetails.emailid,\r\n                                rules: [\r\n                                    {\r\n                                        type: 'email',\r\n                                        message: 'The input is not valid E-mail!',\r\n                                    },\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your E-mail!',\r\n                                    },\r\n                                ],\r\n                            })(<Input />)}\r\n                        </Form.Item> : null }\r\n\r\n                        <Form.Item label=\"Phone Number\" className=\"input-admin-trainer\">\r\n                            {getFieldDecorator('contact', {\r\n                                initialValue : this.props.admin.trainerdetails.contact,\r\n                                rules: [\r\n                                    { \r\n                                        required: true, \r\n                                        message: 'Please input your phone number!' \r\n                                    },\r\n                                    {\r\n                                        len:10,\r\n                                        message:'Contact number must be 10 digit long'\r\n                                    }],\r\n                            })(<Input addonBefore={prefixSelector} min={10} max={10} />)}\r\n                        </Form.Item>\r\n\r\n                        { !this.props.admin.trainerId ? <div><Form.Item label=\"Password\" hasFeedback className=\"input-admin-trainer\">\r\n                                {getFieldDecorator('password', {\r\n                                    initialValue : this.props.admin.trainerdetails.password,\r\n                                    rules: [\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Please input your password!',\r\n                                        },\r\n                                        {\r\n                                            validator: this.validateToNextPassword,\r\n                                        },\r\n                                    ],\r\n                                })(<Input.Password />)}\r\n                            </Form.Item>\r\n                        \r\n                            <Form.Item label=\"Confirm Password\" hasFeedback className=\"input-admin-trainer\">\r\n                                {getFieldDecorator('confirm', {\r\n                                    initialValue : this.props.admin.trainerdetails.confirmpassword,\r\n                                    rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please confirm your password!',\r\n                                    },\r\n                                    {\r\n                                        validator: this.compareToFirstPassword,\r\n                                    },\r\n                                    ],\r\n                                })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n                            </Form.Item></div> : null}\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" block>\r\n                                {this.props.admin.Trainermode}\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    admin : state.admin\r\n});\r\n\r\n\r\n\r\nconst NewTrainerForm = Form.create({ name: 'register' })(NewTrainer);\r\n\r\nexport default connect(mapStateToProps,{\r\n    ChangeTrainerConfirmDirty,\r\n    ChangeTrainerModalState,\r\n    ChangeTrainerTableData\r\n})(NewTrainerForm);\r\n\r\n"]},"metadata":{},"sourceType":"module"}