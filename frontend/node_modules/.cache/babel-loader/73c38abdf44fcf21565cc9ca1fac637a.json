{"ast":null,"code":"import _objectSpread from \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\src\\\\components\\\\trainer\\\\newquestion\\\\newquestion.js\";\nimport React, { Component } from 'react';\nimport './newquestion.css';\nimport { Form, Input, Button, Select, Row, Col, Checkbox, Modal, Upload, Icon, InputNumber } from 'antd';\nimport { connect } from 'react-redux';\nimport { ChangeQuestionConfirmDirty, ChangeQuestionTableData, ChangeQuestionModalState } from '../../../actions/trainerAction';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport Alert from '../../../components/common/alert';\nimport auth from '../../../services/AuthServices';\n\nclass NewQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addfifthOption = e => {\n      this.setState((previousState, previousProps) => {\n        return {\n          fifthoptioAddButtonVisible: false,\n          questionDetails: _objectSpread({}, previousState.questionDetails, {\n            options: [...previousState.questionDetails.options, {\n              image: null,\n              body: null,\n              isAnswer: false\n            }]\n          })\n        };\n      });\n    };\n\n    this.Customalert = () => {\n      Modal.confirm({\n        title: 'Confirm',\n        content: 'empty option can not be set as answer',\n        okText: 'I understand',\n        cancelText: null\n      });\n    };\n\n    this.OptionTextChange = (e, i) => {\n      var newOptions = [...this.state.questionDetails.options];\n      newOptions[i] = _objectSpread({}, this.state.questionDetails.options[i], {\n        body: e.target.value\n      });\n\n      if ((newOptions[i].image === 'undefined' || newOptions[i].image === undefined || newOptions[i].image === null || newOptions[i].image === 'null') && (newOptions[i].body === 'undefined' || newOptions[i].body === undefined || newOptions[i].body === 'null' || newOptions[i].body === '' || newOptions[i].body === null)) {\n        newOptions[i] = _objectSpread({}, this.state.questionDetails.options[i], {\n          isAnswer: false\n        });\n        this.setState((ps, pp) => {\n          return {\n            questionDetails: _objectSpread({}, ps.questionDetails, {\n              options: newOptions\n            })\n          };\n        });\n      }\n\n      this.setState((ps, pp) => {\n        return {\n          questionDetails: _objectSpread({}, ps.questionDetails, {\n            options: newOptions\n          })\n        };\n      });\n    };\n\n    this.AnswerOptionSwitch = (e, i) => {\n      if (this.state.questionDetails.options[i].body !== '' && this.state.questionDetails.options[i].body !== null || this.state.questionDetails.options[i].image !== null && this.state.questionDetails.options[i].image !== 'undefined' && this.state.questionDetails.options[i].image !== undefined) {\n        var newOptions = [...this.state.questionDetails.options];\n        newOptions[i] = _objectSpread({}, this.state.questionDetails.options[i], {\n          isAnswer: e.target.checked\n        });\n        this.setState((ps, pp) => {\n          return {\n            questionDetails: _objectSpread({}, ps.questionDetails, {\n              options: newOptions\n            })\n          };\n        });\n      } else {\n        this.Customalert();\n        return;\n      }\n    };\n\n    this.OptionImageonChange = (f, i) => {\n      var newOptions = [...this.state.questionDetails.options];\n\n      if (!f) {\n        delete newOptions[i].image;\n        newOptions[i].image = null;\n      } else {\n        newOptions[i] = _objectSpread({}, this.state.questionDetails.options[i], {\n          image: \"\".concat(apis.BASE, \"/\").concat(f.link)\n        });\n      }\n\n      this.setState({\n        submitDisabled: false\n      });\n\n      if ((newOptions[i].image === 'undefined' || newOptions[i].image === undefined || newOptions[i].image === null || newOptions[i].image === 'null') && (newOptions[i].body === 'undefined' || newOptions[i].body === undefined || newOptions[i].body === 'null' || newOptions[i].body === '' || newOptions[i].body === null)) {\n        newOptions[i] = _objectSpread({}, this.state.questionDetails.options[i], {\n          isAnswer: false\n        });\n      }\n\n      this.setState((ps, pp) => {\n        return {\n          questionDetails: _objectSpread({}, ps.questionDetails, {\n            options: newOptions\n          })\n        };\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        console.log(values);\n\n        if (!err) {\n          var f = 1;\n          var ans = 0;\n          var opts = [];\n          console.log('Received values of form: ', values);\n          this.state.questionDetails.options.forEach((element, i) => {\n            opts.push({\n              optbody: element.body,\n              optimg: element.image,\n              isAnswer: element.isAnswer\n            });\n\n            if ((element.image === 'undefined' || element.image === undefined || element.image === null || element.image === 'null') && (element.body === '' || element.body === null || element.body === 'null' || element.body === 'undefined' || element.body === undefined)) {\n              f = 0;\n            }\n\n            if (element.isAnswer) {\n              ans = ans + 1;\n            }\n          });\n\n          if (f) {\n            if (!ans) {\n              Alert('warning', 'Warning!', 'There must be atleast one right answer');\n            } else {\n              this.setState({\n                adding: true\n              });\n              SecurePost({\n                url: apis.CREATE_QUESTIONS,\n                data: {\n                  body: values.questionbody,\n                  options: opts,\n                  quesimg: this.state.questionDetails.questionimage,\n                  subject: values.subject,\n                  explanation: values.explanation,\n                  weightage: values.waitage\n                }\n              }).then(response => {\n                console.log(response);\n                this.setState({\n                  adding: false\n                });\n\n                if (response.data.success) {\n                  this.props.ChangeQuestionModalState(false);\n                  Alert('success', 'Success', response.data.message);\n                  this.props.ChangeQuestionTableData(this.props.trainer.selectedSubjects);\n                } else {\n                  this.props.ChangeQuestionModalState(false);\n                  this.props.form.resetFields();\n                  return Alert('warning', 'Warning!', response.data.message);\n                }\n              }).catch(error => {\n                console.log(error);\n                this.props.form.resetFields();\n                this.setState({\n                  adding: false,\n                  questionDetails: {\n                    questionimage: null,\n                    options: [{\n                      image: null,\n                      body: null,\n                      isAnswer: false\n                    }, {\n                      image: null,\n                      body: null,\n                      isAnswer: false\n                    }, {\n                      image: null,\n                      body: null,\n                      isAnswer: false\n                    }, {\n                      image: null,\n                      body: null,\n                      isAnswer: false\n                    }]\n                  }\n                });\n                this.props.ChangeQuestionModalState(false);\n                return Alert('error', 'Error!', 'Server Error');\n              });\n            }\n          } else {\n            Alert('warning', 'Warning!', 'Please fill all the options');\n          }\n        }\n      });\n    };\n\n    this.changeqImage = f => {\n      this.setState((ps, pp) => {\n        return {\n          questionDetails: _objectSpread({}, ps.questionDetails, {\n            questionimage: f.link ? \"\".concat(apis.BASE, \"/\").concat(f.link) : null\n          }),\n          submitDisabled: false\n        };\n      });\n    };\n\n    this.upl = () => {\n      this.setState({\n        submitDisabled: true\n      });\n    };\n\n    this.state = {\n      questionDetails: {\n        questionimage: null,\n        options: [{\n          image: null,\n          body: null,\n          isAnswer: false\n        }, {\n          image: null,\n          body: null,\n          isAnswer: false\n        }, {\n          image: null,\n          body: null,\n          isAnswer: false\n        }, {\n          image: null,\n          body: null,\n          isAnswer: false\n        }]\n      },\n      adding: false,\n      submitDisabled: false,\n      fifthoptioAddButtonVisible: true\n    };\n  }\n\n  render() {\n    console.log(this.state);\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const Option = Select.Option;\n    const TextArea = Input.TextArea;\n    var QuestionImageprops = {\n      name: 'file',\n      action: \"\".concat(apis.BASE).concat(apis.FILE_UPLOAD, \"?Token=\").concat(auth.retriveToken()),\n      listType: 'picture'\n    };\n    return React.createElement(\"div\", {\n      className: \"register-subject-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-trainer-form-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Subject\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, getFieldDecorator('subject', {\n      rules: [{\n        required: true,\n        message: 'Please select any subject!'\n      }]\n    })(React.createElement(Select, {\n      showSearch: true,\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Select a subject\",\n      optionFilterProp: \"s\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, this.props.admin.subjectTableData.map((d, i) => React.createElement(Option, {\n      key: d._id,\n      s: d.topic,\n      value: d._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, d.topic))))))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 18,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Question\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, getFieldDecorator('questionbody', {\n      rules: [{\n        required: true,\n        message: 'Please type question!'\n      }]\n    })(React.createElement(TextArea, {\n      rows: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      span: 6,\n      style: {\n        padding: '0px 20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Question Image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, React.createElement(Upload, Object.assign({}, QuestionImageprops, {\n      beforeUpload: this.upl,\n      onRemove: this.changeqImage,\n      onSuccess: this.changeqImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), \" Upload\"))))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 18,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Explanation\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, getFieldDecorator('explanation', {\n      rules: [{\n        required: true,\n        message: 'Please type Explanation for the answers!'\n      }]\n    })(React.createElement(TextArea, {\n      onChange: this.ExplanationChange,\n      rows: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      offset: 2,\n      span: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Weightage\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, getFieldDecorator('waitage', {\n      rules: [{\n        required: true,\n        message: 'Please enter the marks'\n      }]\n    })(React.createElement(InputNumber, {\n      min: 1,\n      max: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }))))), React.createElement(\"div\", {\n      style: {\n        paddingTop: '20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, this.state.questionDetails.options.map((option, i) => {\n      return React.createElement(Row, {\n        key: i,\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, React.createElement(Col, {\n        offset: 1,\n        span: 13,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        label: \"option\".concat(i + 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }, React.createElement(TextArea, {\n        value: this.state.questionDetails.options[i].body,\n        onChange: e => this.OptionTextChange(e, i),\n        rows: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        offset: 2,\n        span: 6,\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        label: \"Option\".concat(i + 1, \" Image\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, React.createElement(Upload, Object.assign({}, QuestionImageprops, {\n        beforeUpload: this.upl,\n        onRemove: f => this.OptionImageonChange(null, i),\n        onSuccess: f => this.OptionImageonChange(f, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }), React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }), \" Upload\")))), React.createElement(Col, {\n        span: 2,\n        style: {\n          padding: '55px 10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        checked: this.state.questionDetails.options[i].isAnswer,\n        onChange: e => this.AnswerOptionSwitch(e, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }))));\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, this.state.fifthoptioAddButtonVisible ? React.createElement(Button, {\n      type: \"primary\",\n      onClick: e => this.addfifthOption(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, \"Add 5th option\") : null)), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(Col, {\n      offset: 20,\n      span: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      disabled: this.state.submitDisabled,\n      loading: this.state.adding,\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, \"Create Question\"))))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  trainer: state.trainer,\n  admin: state.admin\n});\n\nconst NewQuestionForm = Form.create({\n  name: 'newQuestion'\n})(NewQuestion);\nexport default connect(mapStateToProps, {\n  ChangeQuestionConfirmDirty,\n  ChangeQuestionModalState,\n  ChangeQuestionTableData\n})(NewQuestionForm);","map":{"version":3,"sources":["D:\\Online-Examination-System-master\\Online-Examination-System-master\\frontend\\src\\components\\trainer\\newquestion\\newquestion.js"],"names":["React","Component","Form","Input","Button","Select","Row","Col","Checkbox","Modal","Upload","Icon","InputNumber","connect","ChangeQuestionConfirmDirty","ChangeQuestionTableData","ChangeQuestionModalState","SecurePost","apis","Alert","auth","NewQuestion","constructor","props","addfifthOption","e","setState","previousState","previousProps","fifthoptioAddButtonVisible","questionDetails","options","image","body","isAnswer","Customalert","confirm","title","content","okText","cancelText","OptionTextChange","i","newOptions","state","target","value","undefined","ps","pp","AnswerOptionSwitch","checked","OptionImageonChange","f","BASE","link","submitDisabled","handleSubmit","preventDefault","form","validateFieldsAndScroll","err","values","console","log","ans","opts","forEach","element","push","optbody","optimg","adding","url","CREATE_QUESTIONS","data","questionbody","quesimg","questionimage","subject","explanation","weightage","waitage","then","response","success","message","trainer","selectedSubjects","resetFields","catch","error","changeqImage","upl","render","getFieldDecorator","Option","TextArea","QuestionImageprops","name","action","FILE_UPLOAD","retriveToken","listType","rules","required","width","admin","subjectTableData","map","d","_id","topic","padding","ExplanationChange","paddingTop","option","textAlign","mapStateToProps","NewQuestionForm","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './newquestion.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Checkbox,\r\n    Modal,\r\n    Upload,\r\n    Icon,\r\n    InputNumber \r\n} from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    ChangeQuestionConfirmDirty,\r\n    ChangeQuestionTableData,\r\n    ChangeQuestionModalState\r\n} from '../../../actions/trainerAction';\r\nimport { SecurePost } from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport Alert from '../../../components/common/alert';\r\nimport auth from '../../../services/AuthServices';\r\n\r\n\r\n\r\nclass NewQuestion extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            questionDetails:{\r\n                questionimage:null,\r\n                options :[\r\n                    {\r\n                        image :null,\r\n                        body : null,\r\n                        isAnswer :false\r\n                    },\r\n                    {\r\n                        image :null,\r\n                        body : null,\r\n                        isAnswer :false\r\n                    },\r\n                    {\r\n                        image :null,\r\n                        body : null,\r\n                        isAnswer :false\r\n                    },\r\n                    {\r\n                        image :null,\r\n                        body : null,\r\n                        isAnswer :false\r\n                    }\r\n                ] ,  \r\n            },\r\n            adding:false,\r\n            submitDisabled:false,\r\n            fifthoptioAddButtonVisible:true\r\n        }\r\n        \r\n    }\r\n\r\n    addfifthOption = (e)=>{\r\n        this.setState((previousState,previousProps)=>{\r\n            return({\r\n                fifthoptioAddButtonVisible:false,\r\n                questionDetails:{\r\n                    ...previousState.questionDetails,\r\n                    options:[\r\n                        ...previousState.questionDetails.options,\r\n                        {\r\n                            image :null,\r\n                            body : null,\r\n                            isAnswer :false\r\n                        }\r\n                    ]\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    Customalert = ()=>{\r\n        Modal.confirm({\r\n            title: 'Confirm',\r\n            content: 'empty option can not be set as answer',\r\n            okText: 'I understand',\r\n            cancelText: null,\r\n        });\r\n    }\r\n    \r\n\r\n\r\n\r\n    OptionTextChange =(e,i)=>{\r\n        var newOptions = [...this.state.questionDetails.options]\r\n        newOptions[i]={\r\n            ...this.state.questionDetails.options[i],\r\n            body : e.target.value\r\n        }\r\n        if((newOptions[i].image==='undefined' || newOptions[i].image===undefined || newOptions[i].image===null || newOptions[i].image==='null') && \r\n            (newOptions[i].body==='undefined' || newOptions[i].body===undefined || newOptions[i].body==='null' || newOptions[i].body==='' || newOptions[i].body===null)){\r\n                newOptions[i]={\r\n                    ...this.state.questionDetails.options[i],\r\n                    isAnswer : false\r\n                }\r\n                this.setState((ps,pp)=>{\r\n                    return({\r\n                        questionDetails:{\r\n                            ...ps.questionDetails,\r\n                            options:newOptions\r\n                        }\r\n                    })\r\n                })\r\n        }\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                questionDetails:{\r\n                    ...ps.questionDetails,\r\n                    options:newOptions\r\n                }\r\n            })\r\n        })     \r\n    }\r\n\r\n    AnswerOptionSwitch = (e,i)=>{\r\n        if((this.state.questionDetails.options[i].body!=='' && this.state.questionDetails.options[i].body!==null)\r\n            || (this.state.questionDetails.options[i].image!==null && this.state.questionDetails.options[i].image!=='undefined' && this.state.questionDetails.options[i].image!==undefined)\r\n        ){\r\n            var newOptions = [...this.state.questionDetails.options]\r\n            newOptions[i]={\r\n                ...this.state.questionDetails.options[i],\r\n                isAnswer : e.target.checked\r\n            }\r\n            this.setState((ps,pp)=>{\r\n                return({\r\n                    questionDetails:{\r\n                        ...ps.questionDetails,\r\n                        options:newOptions\r\n                    }\r\n                })\r\n            })\r\n            \r\n        }\r\n        else{   \r\n            this.Customalert()\r\n            return;\r\n        }\r\n        \r\n    }\r\n\r\n    OptionImageonChange = (f,i)=>{\r\n        var newOptions = [...this.state.questionDetails.options]\r\n        if(!f){\r\n            delete newOptions[i].image\r\n            newOptions[i].image=null\r\n        }\r\n        else{\r\n            newOptions[i]={\r\n                ...this.state.questionDetails.options[i],\r\n                image :`${apis.BASE}/${f.link}`\r\n            }\r\n        }\r\n        this.setState({\r\n            submitDisabled:false\r\n        })\r\n        if((newOptions[i].image==='undefined' || newOptions[i].image===undefined || newOptions[i].image===null || newOptions[i].image==='null') && \r\n            (newOptions[i].body==='undefined' || newOptions[i].body===undefined || newOptions[i].body==='null' || newOptions[i].body==='' || newOptions[i].body===null)){\r\n                newOptions[i]={\r\n                    ...this.state.questionDetails.options[i],\r\n                    isAnswer : false\r\n                }\r\n        }\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                questionDetails:{\r\n                    ...ps.questionDetails,\r\n                    options:newOptions\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            console.log(values);\r\n            if (!err) {\r\n                var f=1;\r\n                var ans=0;\r\n                var opts=[]\r\n                console.log('Received values of form: ', values);\r\n                this.state.questionDetails.options.forEach((element,i) => {\r\n                    opts.push({\r\n                        optbody:element.body,\r\n                        optimg:element.image,\r\n                        isAnswer:element.isAnswer\r\n                    });\r\n                    if((element.image==='undefined' || element.image===undefined || element.image===null || element.image==='null')&&(element.body==='' ||element.body===null || element.body==='null' || element.body==='undefined' || element.body===undefined )){\r\n                        f=0;\r\n                    }\r\n                    if(element.isAnswer){\r\n                        ans=ans+1\r\n                    }\r\n                })\r\n                if(f){\r\n                    if(!ans){\r\n                        Alert('warning','Warning!','There must be atleast one right answer');\r\n                    }\r\n                    else{\r\n                        this.setState({\r\n                            adding:true\r\n                        });\r\n                        SecurePost({\r\n                            url:apis.CREATE_QUESTIONS,\r\n                            data:{\r\n                                body:values.questionbody,\r\n                                options:opts,\r\n                                quesimg:this.state.questionDetails.questionimage,\r\n                                subject:values.subject,\r\n                                explanation:values.explanation,\r\n                                weightage:values.waitage,\r\n                            }\r\n                        }).then((response)=>{\r\n                            console.log(response);\r\n                            this.setState({\r\n                                adding:false\r\n                            });\r\n                            if(response.data.success){\r\n                                this.props.ChangeQuestionModalState(false);\r\n                                Alert('success','Success',response.data.message);\r\n                                this.props.ChangeQuestionTableData(this.props.trainer.selectedSubjects);\r\n                            }\r\n                            else{\r\n                                this.props.ChangeQuestionModalState(false);\r\n                                this.props.form.resetFields();\r\n                                return Alert('warning','Warning!',response.data.message);\r\n                            }\r\n\r\n                        }).catch((error)=>{\r\n                            console.log(error);\r\n                            this.props.form.resetFields();\r\n                            this.setState({\r\n                                adding:false,\r\n                                questionDetails:{\r\n                                    questionimage:null,\r\n                                    options :[\r\n                                        {\r\n                                            image :null,\r\n                                            body : null,\r\n                                            isAnswer :false\r\n                                        },\r\n                                        {\r\n                                            image :null,\r\n                                            body : null,\r\n                                            isAnswer :false\r\n                                        },\r\n                                        {\r\n                                            image :null,\r\n                                            body : null,\r\n                                            isAnswer :false\r\n                                        },\r\n                                        {\r\n                                            image :null,\r\n                                            body : null,\r\n                                            isAnswer :false\r\n                                        }\r\n                                    ] ,  \r\n                                }\r\n                            });\r\n                            this.props.ChangeQuestionModalState(false);\r\n                            return Alert('error','Error!','Server Error');\r\n                        })\r\n                        \r\n                    }\r\n                }\r\n                else{\r\n                    Alert('warning','Warning!','Please fill all the options');\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    changeqImage = (f)=>{\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                questionDetails:{\r\n                    ...ps.questionDetails,\r\n                    questionimage:(f.link ?`${apis.BASE}/${f.link}`:null)\r\n                },\r\n                submitDisabled:false\r\n            })\r\n        })\r\n    }\r\n\r\n    upl=()=>{\r\n        this.setState({\r\n            submitDisabled:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state)\r\n        const { getFieldDecorator } = this.props.form;\r\n        const { Option } = Select;\r\n        const { TextArea } = Input;\r\n        var QuestionImageprops={\r\n            name: 'file',\r\n            action: `${apis.BASE}${apis.FILE_UPLOAD}?Token=${auth.retriveToken()}`,\r\n            listType: 'picture',\r\n        }\r\n        \r\n        return (\r\n            <div className=\"register-subject-form\" >\r\n                <div className=\"register-trainer-form-body\">\r\n                    <Form  onSubmit={this.handleSubmit}>\r\n                        <div>\r\n                            <Row>\r\n                                <Col span={8}>\r\n                                    <Form.Item label=\"Subject\" hasFeedback>\r\n                                        {getFieldDecorator('subject', {\r\n                                            rules: [{ required: true, message: 'Please select any subject!' }],\r\n                                        })(\r\n                                            <Select\r\n                                                showSearch\r\n                                                style={{ width:'100%'}}\r\n                                                placeholder=\"Select a subject\"\r\n                                                optionFilterProp=\"s\"\r\n                                            >\r\n                                                {\r\n                                                    this.props.admin.subjectTableData.map((d,i)=><Option key={d._id} s={d.topic} value={d._id}>{d.topic}</Option>)\r\n                                                }\r\n                                            </Select>\r\n                                        )}\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col span={18}>\r\n                                    <Form.Item label=\"Question\" hasFeedback>\r\n                                        {getFieldDecorator('questionbody', {\r\n                                            rules: [{ required: true, message: 'Please type question!' }],\r\n                                        })(\r\n                                            <TextArea rows={5} />\r\n                                        )}\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col span={6} style={{padding : '0px 20px'}}>\r\n                                    <Form.Item label=\"Question Image\">\r\n                                        <Upload {...QuestionImageprops} beforeUpload={this.upl} onRemove={this.changeqImage} onSuccess={this.changeqImage}>\r\n                                            <Button>\r\n                                                <Icon type=\"upload\" /> Upload\r\n                                            </Button>\r\n                                        </Upload>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col span={18}>\r\n                                    <Form.Item label=\"Explanation\" hasFeedback>\r\n                                        {getFieldDecorator('explanation', {\r\n                                            rules: [{ required: true, message: 'Please type Explanation for the answers!' }],\r\n                                        })(\r\n                                            <TextArea onChange={this.ExplanationChange} rows={3} />\r\n                                        )}\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col offset={2} span={4}>\r\n                                    <Form.Item label=\"Weightage\" hasFeedback>\r\n                                        {getFieldDecorator('waitage', {\r\n                                            rules: [{ required: true, message: 'Please enter the marks' }],\r\n                                        })(\r\n                                            <InputNumber min={1} max={2}  />\r\n                                        )}\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            <div style={{paddingTop:'20px'}}>\r\n                                {\r\n                                    this.state.questionDetails.options.map((option,i)=>{\r\n                                        return(\r\n                                            <Row key={i} className=\"\">\r\n                                                <Col offset={1} span={13}>\r\n                                                    <Form.Item label={`option${i+1}`}>\r\n                                                        <TextArea value={this.state.questionDetails.options[i].body} onChange={ (e)=>this.OptionTextChange(e,i)} rows={3} />\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                                <Col offset={2} span={6} style={{textAlign:'center'}}>\r\n                                                    <Form.Item label={`Option${i+1} Image`}>\r\n                                                        <Upload {...QuestionImageprops} beforeUpload={this.upl} onRemove={(f)=>this.OptionImageonChange(null,i)} onSuccess={(f)=>this.OptionImageonChange(f,i)}>\r\n                                                            <Button>\r\n                                                                <Icon type=\"upload\" /> Upload\r\n                                                            </Button>\r\n                                                        </Upload>\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                                <Col span={2} style={{padding : '55px 10px'}}>\r\n                                                    <Form.Item>\r\n                                                        <Checkbox checked={this.state.questionDetails.options[i].isAnswer} onChange={(e)=>this.AnswerOptionSwitch(e,i)} ></Checkbox>\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                            </Row>                                                \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n                            <Row>\r\n                                <Col span={12}>\r\n                                    { this.state.fifthoptioAddButtonVisible ? <Button type=\"primary\" onClick={(e)=>this.addfifthOption(e)}>Add 5th option</Button> : null}\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col offset={20}  span={4}>\r\n                                    <Form.Item>\r\n                                        <Button type=\"primary\" htmlType=\"submit\" disabled={this.state.submitDisabled} loading={this.state.adding} block>\r\n                                            Create Question\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            \r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    trainer : state.trainer,\r\n    admin : state.admin\r\n});\r\n\r\n\r\n\r\nconst NewQuestionForm = Form.create({ name: 'newQuestion' })(NewQuestion);\r\n\r\nexport default connect(mapStateToProps,{\r\n    ChangeQuestionConfirmDirty,\r\n    ChangeQuestionModalState,\r\n    ChangeQuestionTableData\r\n})(NewQuestionForm);\r\n\r\n"]},"metadata":{},"sourceType":"module"}