{"ast":null,"code":"import _objectSpread from \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\src\\\\components\\\\trainer\\\\conducttest\\\\candidates.js\";\nimport React, { Component } from 'react';\nimport { changeConducttestId, updateCandidatesTest } from '../../../actions/conductTest';\nimport { connect } from 'react-redux';\nimport apis from '../../../services/Apis';\nimport { SecurePost } from '../../../services/axiosCall';\nimport Alert from '../../common/alert';\nimport { Table, Input, Button, Icon, message, Typography } from 'antd';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport Highlighter from 'react-highlight-words';\nimport './conducttes.css';\nconst Title = Typography.Title;\n\nclass Candidates extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getColumnSearchProps = dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => React.createElement(\"div\", {\n        style: {\n          padding: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(Input, {\n        ref: node => {\n          this.searchInput = node;\n        },\n        placeholder: \"Search \".concat(dataIndex),\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: () => this.handleSearch(selectedKeys, confirm),\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: 'block'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        onClick: () => this.handleSearch(selectedKeys, confirm),\n        icon: \"search\",\n        size: \"small\",\n        style: {\n          width: 90,\n          marginRight: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Search\"), React.createElement(Button, {\n        onClick: () => this.handleReset(clearFilters),\n        size: \"small\",\n        style: {\n          width: 90\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Reset\")),\n      filterIcon: filtered => React.createElement(Icon, {\n        type: \"search\",\n        style: {\n          color: filtered ? '#1890ff' : undefined\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select());\n        }\n      },\n      render: text => React.createElement(Highlighter, {\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [this.state.searchText],\n        autoEscape: true,\n        textToHighlight: text.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })\n    });\n\n    this.handleSearch = (selectedKeys, confirm) => {\n      confirm();\n      this.setState({\n        searchText: selectedKeys[0]\n      });\n    };\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.setState({\n        searchText: ''\n      });\n    };\n\n    this.refreshUserList = () => {\n      this.setState({\n        loading: true\n      });\n      SecurePost({\n        url: \"\".concat(apis.GET_TEST_CANDIDATES),\n        data: {\n          id: this.props.conduct.id\n        }\n      }).then(response => {\n        console.log(response);\n\n        if (response.data.success) {\n          this.props.updateCandidatesTest(response.data.data);\n        } else {\n          Alert('error', 'Error!', response.data.message);\n        }\n\n        this.setState({\n          loading: false\n        });\n      }).catch(error => {\n        console.log(error);\n        Alert('error', 'Error!', 'Server Error');\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.state = {\n      loading: false,\n      searchText: '',\n      mainlink: ''\n    };\n  }\n\n  componentDidMount() {\n    var link = window.location.href.split('/').splice(0, 3);\n    var mainlink = \"\";\n    link.forEach((d, i) => {\n      mainlink = mainlink + d + \"/\";\n    });\n    this.setState({\n      mainlink\n    });\n    this.refreshUserList();\n  }\n\n  render() {\n    const columns = [_objectSpread({\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name'\n    }, this.getColumnSearchProps('name')), _objectSpread({\n      title: 'Email Id',\n      dataIndex: 'emailid',\n      key: 'emailid'\n    }, this.getColumnSearchProps('emailid')), _objectSpread({\n      title: 'Contact No',\n      dataIndex: 'contact',\n      key: 'contact'\n    }, this.getColumnSearchProps('contact')), {\n      title: 'Links',\n      key: '_id',\n      dataIndex: '_id',\n      render: id => React.createElement(Input, {\n        disabled: true,\n        value: \"\".concat(this.state.mainlink, \"trainee/taketest?testid=\").concat(this.props.conduct.id, \"&traineeid=\").concat(id),\n        addonAfter: React.createElement(CopyToClipboard, {\n          text: \"\".concat(this.state.mainlink, \"trainee/taketest?testid=\").concat(this.props.conduct.id, \"&traineeid=\").concat(id),\n          onCopy: () => message.success('Link Copied to clipboard'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          type: \"copy\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })\n    }];\n    return React.createElement(\"div\", {\n      className: \"candidate-list-header-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"reload-button\",\n      type: \"primary\",\n      icon: \"reload\",\n      loading: this.state.loading,\n      onClick: this.refreshUserList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Reload!\"), React.createElement(\"div\", {\n      className: \"register-trainer-form-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Title, {\n      level: 4,\n      style: {\n        color: '#fff',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"List of Registered Candidates\")), React.createElement(Table, {\n      columns: columns,\n      bordered: true,\n      dataSource: this.props.conduct.registeredCandidates,\n      rowKey: \"_id\",\n      loading: this.state.loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  conduct: state.conduct\n});\n\nexport default connect(mapStateToProps, {\n  changeConducttestId,\n  updateCandidatesTest\n})(Candidates);","map":{"version":3,"sources":["D:\\Online-Examination-System-master\\Online-Examination-System-master\\frontend\\src\\components\\trainer\\conducttest\\candidates.js"],"names":["React","Component","changeConducttestId","updateCandidatesTest","connect","apis","SecurePost","Alert","Table","Input","Button","Icon","message","Typography","CopyToClipboard","Highlighter","Title","Candidates","constructor","props","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","node","searchInput","e","target","value","handleSearch","width","marginBottom","display","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","backgroundColor","state","searchText","setState","refreshUserList","loading","url","GET_TEST_CANDIDATES","data","id","conduct","then","response","console","log","success","catch","error","mainlink","componentDidMount","link","window","location","href","split","splice","forEach","d","i","columns","title","key","textAlign","registeredCandidates","mapStateToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,8BAA1D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,KAAT,EAAeC,KAAf,EAAqBC,MAArB,EAA4BC,IAA5B,EAAiCC,OAAjC,EAAyCC,UAAzC,QAA2D,MAA3D;AACA,SAAQC,eAAR,QAA8B,yBAA9B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAO,kBAAP;MAEQC,K,GAAUH,U,CAAVG,K;;AAGR,MAAMC,UAAN,SAAyBhB,SAAzB,CAAmC;AAE/BiB,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SASlBC,oBATkB,GASKC,SAAS,KAAK;AACjCC,MAAAA,cAAc,EAAE,CAAC;AAAEC,QAAAA,eAAF;AAAmBC,QAAAA,YAAnB;AAAiCC,QAAAA,OAAjC;AAA0CC,QAAAA;AAA1C,OAAD,KACd;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,GAAG,EAAEC,IAAI,IAAI;AACX,eAAKC,WAAL,GAAmBD,IAAnB;AACD,SAHH;AAIE,QAAA,WAAW,mBAAYP,SAAZ,CAJb;AAKE,QAAA,KAAK,EAAEG,YAAY,CAAC,CAAD,CALrB;AAME,QAAA,QAAQ,EAAEM,CAAC,IAAIP,eAAe,CAACO,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiB,CAACF,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB,GAAoC,EAArC,CANhC;AAOE,QAAA,YAAY,EAAE,MAAM,KAAKC,YAAL,CAAkBT,YAAlB,EAAgCC,OAAhC,CAPtB;AAQE,QAAA,KAAK,EAAE;AAAES,UAAAA,KAAK,EAAE,GAAT;AAAcC,UAAAA,YAAY,EAAE,CAA5B;AAA+BC,UAAAA,OAAO,EAAE;AAAxC,SART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAWE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKH,YAAL,CAAkBT,YAAlB,EAAgCC,OAAhC,CAFjB;AAGE,QAAA,IAAI,EAAC,QAHP;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,KAAK,EAAE;AAAES,UAAAA,KAAK,EAAE,EAAT;AAAaG,UAAAA,WAAW,EAAE;AAA1B,SALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXF,EAoBE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKC,WAAL,CAAiBZ,YAAjB,CAAvB;AAAuD,QAAA,IAAI,EAAC,OAA5D;AAAoE,QAAA,KAAK,EAAE;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBApBF,CAF+B;AA2BjCK,MAAAA,UAAU,EAAEC,QAAQ,IAClB,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,QAAX;AAAoB,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAED,QAAQ,GAAG,SAAH,GAAeE;AAAhC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA5B+B;AA8BjCC,MAAAA,QAAQ,EAAE,CAACX,KAAD,EAAQY,MAAR,KACRA,MAAM,CAACvB,SAAD,CAAN,CACGwB,QADH,GAEGC,WAFH,GAGGC,QAHH,CAGYf,KAAK,CAACc,WAAN,EAHZ,CA/B+B;AAmCjCE,MAAAA,6BAA6B,EAAEC,OAAO,IAAI;AACxC,YAAIA,OAAJ,EAAa;AACXC,UAAAA,UAAU,CAAC,MAAM,KAAKrB,WAAL,CAAiBsB,MAAjB,EAAP,CAAV;AACD;AACF,OAvCgC;AAwCjCC,MAAAA,MAAM,EAAEC,IAAI,IACV,oBAAC,WAAD;AACE,QAAA,cAAc,EAAE;AAAEC,UAAAA,eAAe,EAAE,SAAnB;AAA8B3B,UAAAA,OAAO,EAAE;AAAvC,SADlB;AAEE,QAAA,WAAW,EAAE,CAAC,KAAK4B,KAAL,CAAWC,UAAZ,CAFf;AAGE,QAAA,UAAU,MAHZ;AAIE,QAAA,eAAe,EAAEH,IAAI,CAACR,QAAL,EAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzC+B,KAAL,CATd;;AAAA,SA4DlBZ,YA5DkB,GA4DH,CAACT,YAAD,EAAeC,OAAf,KAA2B;AACtCA,MAAAA,OAAO;AACP,WAAKgC,QAAL,CAAc;AAAED,QAAAA,UAAU,EAAEhC,YAAY,CAAC,CAAD;AAA1B,OAAd;AACH,KA/DiB;;AAAA,SAiElBc,WAjEkB,GAiEJZ,YAAY,IAAI;AAC1BA,MAAAA,YAAY;AACZ,WAAK+B,QAAL,CAAc;AAAED,QAAAA,UAAU,EAAE;AAAd,OAAd;AACH,KApEiB;;AAAA,SAoFlBE,eApFkB,GAoFD,MAAI;AACjB,WAAKD,QAAL,CAAc;AACVE,QAAAA,OAAO,EAAC;AADE,OAAd;AAGArD,MAAAA,UAAU,CAAC;AACPsD,QAAAA,GAAG,YAAIvD,IAAI,CAACwD,mBAAT,CADI;AAEPC,QAAAA,IAAI,EAAC;AACDC,UAAAA,EAAE,EAAC,KAAK5C,KAAL,CAAW6C,OAAX,CAAmBD;AADrB;AAFE,OAAD,CAAV,CAKGE,IALH,CAKSC,QAAD,IAAY;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,YAAGA,QAAQ,CAACJ,IAAT,CAAcO,OAAjB,EAAyB;AACrB,eAAKlD,KAAL,CAAWhB,oBAAX,CAAgC+D,QAAQ,CAACJ,IAAT,CAAcA,IAA9C;AACH,SAFD,MAGI;AACAvD,UAAAA,KAAK,CAAC,OAAD,EAAS,QAAT,EAAkB2D,QAAQ,CAACJ,IAAT,CAAclD,OAAhC,CAAL;AACH;;AACD,aAAK6C,QAAL,CAAc;AACVE,UAAAA,OAAO,EAAC;AADE,SAAd;AAGH,OAhBD,EAgBGW,KAhBH,CAgBUC,KAAD,IAAS;AACdJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAhE,QAAAA,KAAK,CAAC,OAAD,EAAS,QAAT,EAAkB,cAAlB,CAAL;AACA,aAAKkD,QAAL,CAAc;AACVE,UAAAA,OAAO,EAAC;AADE,SAAd;AAGH,OAtBD;AAuBH,KA/GiB;;AAEd,SAAKJ,KAAL,GAAW;AACPI,MAAAA,OAAO,EAAC,KADD;AAEPH,MAAAA,UAAU,EAAE,EAFL;AAGPgB,MAAAA,QAAQ,EAAC;AAHF,KAAX;AAKH;;AAkEDC,EAAAA,iBAAiB,GAAE;AACjB,QAAIC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,EAAgCC,MAAhC,CAAuC,CAAvC,EAAyC,CAAzC,CAAX;AACA,QAAIP,QAAQ,GAAC,EAAb;AACAE,IAAAA,IAAI,CAACM,OAAL,CAAa,CAACC,CAAD,EAAGC,CAAH,KAAO;AAChBV,MAAAA,QAAQ,GAACA,QAAQ,GAACS,CAAT,GAAW,GAApB;AACH,KAFD;AAGA,SAAKxB,QAAL,CAAc;AAACe,MAAAA;AAAD,KAAd;AACA,SAAKd,eAAL;AACD;;AAgCDN,EAAAA,MAAM,GAAG;AACL,UAAM+B,OAAO,GAAG;AAEVC,MAAAA,KAAK,EAAE,MAFG;AAGV/D,MAAAA,SAAS,EAAE,MAHD;AAIVgE,MAAAA,GAAG,EAAE;AAJK,OAKP,KAAKjE,oBAAL,CAA0B,MAA1B,CALO;AAQVgE,MAAAA,KAAK,EAAE,UARG;AASV/D,MAAAA,SAAS,EAAE,SATD;AAUVgE,MAAAA,GAAG,EAAE;AAVK,OAWP,KAAKjE,oBAAL,CAA0B,SAA1B,CAXO;AAcRgE,MAAAA,KAAK,EAAE,YAdC;AAeR/D,MAAAA,SAAS,EAAE,SAfH;AAgBRgE,MAAAA,GAAG,EAAE;AAhBG,OAiBL,KAAKjE,oBAAL,CAA0B,SAA1B,CAjBK,GAmBZ;AACIgE,MAAAA,KAAK,EAAE,OADX;AAEIC,MAAAA,GAAG,EAAE,KAFT;AAGIhE,MAAAA,SAAS,EAAE,KAHf;AAII+B,MAAAA,MAAM,EAAEW,EAAE,IACR,oBAAC,KAAD;AAAO,QAAA,QAAQ,EAAE,IAAjB;AAAuB,QAAA,KAAK,YAAK,KAAKR,KAAL,CAAWiB,QAAhB,qCAAmD,KAAKrD,KAAL,CAAW6C,OAAX,CAAmBD,EAAtE,wBAAsFA,EAAtF,CAA5B;AAAwH,QAAA,UAAU,EAAE,oBAAC,eAAD;AAAiB,UAAA,IAAI,YAAK,KAAKR,KAAL,CAAWiB,QAAhB,qCAAmD,KAAKrD,KAAL,CAAW6C,OAAX,CAAmBD,EAAtE,wBAAsFA,EAAtF,CAArB;AAAiH,UAAA,MAAM,EAAE,MAAInD,OAAO,CAACyD,OAAR,CAAgB,0BAAhB,CAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0K,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA1K,CAApI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALN,KAnBY,CAAhB;AA6BA,WACI;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAkC,MAAA,IAAI,EAAC,SAAvC;AAAiD,MAAA,IAAI,EAAC,QAAtD;AAA+D,MAAA,OAAO,EAAE,KAAKd,KAAL,CAAWI,OAAnF;AAA4F,MAAA,OAAO,EAAE,KAAKD,eAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI;AAAK,MAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,CAAd;AAAiB,MAAA,KAAK,EAAE;AAACjB,QAAAA,KAAK,EAAC,MAAP;AAAc6C,QAAAA,SAAS,EAAC;AAAxB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADJ,CAFJ,EAKI,oBAAC,KAAD;AACA,MAAA,OAAO,EAAEH,OADT;AAEA,MAAA,QAAQ,EAAE,IAFV;AAGA,MAAA,UAAU,EAAE,KAAKhE,KAAL,CAAW6C,OAAX,CAAmBuB,oBAH/B;AAIA,MAAA,MAAM,EAAC,KAJP;AAKA,MAAA,OAAO,EAAE,KAAKhC,KAAL,CAAWI,OALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AAeH;;AAhK8B;;AAqKnC,MAAM6B,eAAe,GAAGjC,KAAK,KAAK;AAC9BS,EAAAA,OAAO,EAAGT,KAAK,CAACS;AADc,CAAL,CAA7B;;AAIA,eAAe5D,OAAO,CAACoF,eAAD,EAAiB;AACnCtF,EAAAA,mBADmC;AAEnCC,EAAAA;AAFmC,CAAjB,CAAP,CAGZc,UAHY,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { changeConducttestId, updateCandidatesTest } from '../../../actions/conductTest';\r\nimport { connect } from 'react-redux';\r\nimport apis from '../../../services/Apis';\r\nimport { SecurePost } from '../../../services/axiosCall';\r\nimport Alert from '../../common/alert';\r\nimport { Table,Input,Button,Icon,message,Typography } from 'antd';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport Highlighter from 'react-highlight-words';\r\nimport './conducttes.css';\r\n\r\nconst { Title } = Typography;\r\n\r\n\r\nclass Candidates extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            loading:false,\r\n            searchText: '',\r\n            mainlink:''\r\n        }\r\n    }\r\n\r\n    getColumnSearchProps = dataIndex => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n          <div style={{ padding: 8 }}>\r\n            <Input\r\n              ref={node => {\r\n                this.searchInput = node;\r\n              }}\r\n              placeholder={`Search ${dataIndex}`}\r\n              value={selectedKeys[0]}\r\n              onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n              onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\r\n              style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => this.handleSearch(selectedKeys, confirm)}\r\n              icon=\"search\"\r\n              size=\"small\"\r\n              style={{ width: 90, marginRight: 8 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        ),\r\n        filterIcon: filtered => (\r\n          <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\r\n        ),\r\n        onFilter: (value, record) =>\r\n          record[dataIndex]\r\n            .toString()\r\n            .toLowerCase()\r\n            .includes(value.toLowerCase()),\r\n        onFilterDropdownVisibleChange: visible => {\r\n          if (visible) {\r\n            setTimeout(() => this.searchInput.select());\r\n          }\r\n        },\r\n        render: text => (\r\n          <Highlighter\r\n            highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n            searchWords={[this.state.searchText]}\r\n            autoEscape\r\n            textToHighlight={text.toString()}\r\n          />\r\n        ),\r\n    });\r\n\r\n\r\n    handleSearch = (selectedKeys, confirm) => {\r\n        confirm();\r\n        this.setState({ searchText: selectedKeys[0] });\r\n    };\r\n    \r\n    handleReset = clearFilters => {\r\n        clearFilters();\r\n        this.setState({ searchText: '' });\r\n    };\r\n\r\n\r\n\r\n\r\n    componentDidMount(){\r\n      var link = window.location.href.split('/').splice(0,3);\r\n      var mainlink=\"\";\r\n      link.forEach((d,i)=>{\r\n          mainlink=mainlink+d+\"/\"\r\n      });\r\n      this.setState({mainlink});\r\n      this.refreshUserList(); \r\n    }\r\n\r\n\r\n    refreshUserList =()=>{\r\n        this.setState({\r\n            loading:true\r\n        })\r\n        SecurePost({\r\n            url:`${apis.GET_TEST_CANDIDATES}`,\r\n            data:{\r\n                id:this.props.conduct.id\r\n            }\r\n        }).then((response)=>{\r\n            console.log(response);\r\n            if(response.data.success){\r\n                this.props.updateCandidatesTest(response.data.data);\r\n            }\r\n            else{\r\n                Alert('error','Error!',response.data.message)\r\n            }\r\n            this.setState({\r\n                loading:false\r\n            })\r\n        }).catch((error)=>{\r\n            console.log(error);\r\n            Alert('error','Error!','Server Error')\r\n            this.setState({\r\n                loading:false\r\n            })\r\n        }) \r\n    }\r\n\r\n    render() {\r\n        const columns = [\r\n            {\r\n              title: 'Name',\r\n              dataIndex: 'name',\r\n              key: 'name',\r\n              ...this.getColumnSearchProps('name'),\r\n            },\r\n            {\r\n              title: 'Email Id',\r\n              dataIndex: 'emailid',\r\n              key: 'emailid',\r\n              ...this.getColumnSearchProps('emailid'),\r\n            },\r\n            {\r\n                title: 'Contact No',\r\n                dataIndex: 'contact',\r\n                key: 'contact',\r\n                ...this.getColumnSearchProps('contact'),\r\n            },\r\n            {\r\n                title: 'Links',\r\n                key: '_id',\r\n                dataIndex: '_id',\r\n                render: id => (\r\n                  <Input disabled={true} value={`${this.state.mainlink}trainee/taketest?testid=${this.props.conduct.id}&traineeid=${id}`} addonAfter={<CopyToClipboard text={`${this.state.mainlink}trainee/taketest?testid=${this.props.conduct.id}&traineeid=${id}`} onCopy={()=>message.success('Link Copied to clipboard')}><Icon type=\"copy\"/></CopyToClipboard>}/>\r\n                ),\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div className=\"candidate-list-header-container\"> \r\n                <Button className=\"reload-button\" type=\"primary\" icon=\"reload\" loading={this.state.loading} onClick={this.refreshUserList}>Reload!</Button>\r\n                <div className=\"register-trainer-form-header\">\r\n                    <Title level={4} style={{color:'#fff',textAlign:'center'}}>List of Registered Candidates</Title>\r\n                </div> \r\n                <Table \r\n                columns={columns} \r\n                bordered={true} \r\n                dataSource={this.props.conduct.registeredCandidates}\r\n                rowKey=\"_id\"\r\n                loading={this.state.loading}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    conduct : state.conduct\r\n});\r\n\r\nexport default connect(mapStateToProps,{\r\n    changeConducttestId,\r\n    updateCandidatesTest\r\n})(Candidates);"]},"metadata":{},"sourceType":"module"}