{"ast":null,"code":"import _objectSpread from \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\src\\\\components\\\\trainee\\\\answersheet\\\\answer.js\";\nimport React from 'react';\nimport { Table, Icon, Tag, Skeleton, Descriptions, Modal, Button, Row, Col } from 'antd';\nimport './answer.css';\nimport './answermobileview.css';\nimport './individualquestion_mobileview.css';\nimport { connect } from 'react-redux';\nimport { Post } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport Alert from '../../common/alert';\nimport { Typography } from 'antd';\nimport Feedback from './feedback';\nimport { FeedbackStatus } from '../../../actions/traineeAction';\nconst Title = Typography.Title;\n\nclass Answer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCancel = () => {\n      this.setState({\n        Mvisible: false\n      });\n    };\n\n    this.OpenModel = qid => {\n      this.setState({\n        ActiveQuestionId: qid,\n        Mvisible: true\n      });\n    };\n\n    this.state = {\n      loading: false,\n      data: [],\n      TotalScore: null,\n      Mvisible: false,\n      ActiveQuestionId: null\n    };\n  }\n\n  componentDidMount() {\n    let _this$props$trainee = this.props.trainee,\n        traineeid = _this$props$trainee.traineeid,\n        testid = _this$props$trainee.testid;\n    this.setState({\n      loading: true\n    });\n    let p1 = Post({\n      url: apis.FETCH_OWN_RESULT,\n      data: {\n        userid: traineeid,\n        testid: testid\n      }\n    });\n    let p2 = Post({\n      url: \"\".concat(apis.FETCH_TRAINEE_TEST_QUESTION),\n      data: {\n        id: testid\n      }\n    });\n    let p3 = Post({\n      url: \"\".concat(apis.FEEDBACK_STATUS_CHECK),\n      data: {\n        userid: traineeid,\n        testid: testid\n      }\n    });\n    Promise.all([p1, p2, p3]).then(d => {\n      console.log(d);\n      this.setState({\n        loading: false\n      });\n\n      if (d[0].data.success && d[1].data.success) {\n        let v = d[1].data.data;\n        let r = d[0].data.result.result.map((dd, i) => {\n          return _objectSpread({}, dd, v[i]);\n        });\n        console.log(r);\n        this.setState({\n          data: r,\n          TotalScore: d[0].data.result.score\n        });\n\n        if (d[2].data.success) {\n          this.props.FeedbackStatus(d[2].data.status);\n        }\n      } else {\n        Alert('error', 'Error!', \"\".concat(d[0].data.success ? \"\" : d[0].data.message, \" and \").concat(d[1].data.success ? \"\" : d[1].data.message));\n      }\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        loading: false\n      });\n      Alert('error', 'Error!', \"Server Error\");\n    });\n  }\n\n  render() {\n    const columns = [{\n      title: 'View Question',\n      key: 'action',\n      render: (text, record) => React.createElement(Button, {\n        shape: \"circle\",\n        icon: \"info\",\n        type: \"primary\",\n        size: \"small\",\n        onClick: () => {\n          this.OpenModel(text.qid);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })\n    }, {\n      title: \"Question\",\n      dataIndex: 'body',\n      key: 'body'\n    }, {\n      title: 'Correct Answers',\n      key: 'correctAnswer',\n      dataIndex: 'correctAnswer',\n      render: tags => React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, tags.map(tag => {\n        return React.createElement(Tag, {\n          color: \"green\",\n          key: tag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, tag.toUpperCase());\n      }))\n    }, {\n      title: 'Given Answers',\n      key: 'givenAnswer',\n      dataIndex: 'givenAnswer',\n      render: tags => React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, tags.map(tag => {\n        return React.createElement(Tag, {\n          color: \"blue\",\n          key: tag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        }, tag.toUpperCase());\n      }))\n    }, {\n      title: 'Weightage',\n      dataIndex: 'weightage',\n      key: 'weightage'\n    }, {\n      title: \"Explanation\",\n      dataIndex: 'explanation',\n      key: 'explanation'\n    }, {\n      title: \"Status\",\n      dataIndex: 'iscorrect',\n      key: 'iscorrect',\n      render: tags => React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, tags ? React.createElement(Icon, {\n        type: \"check-circle\",\n        theme: \"twoTone\",\n        twoToneColor: \"#52c41a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }) : React.createElement(Icon, {\n        type: \"close-circle\",\n        theme: \"twoTone\",\n        twoToneColor: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }))\n    }];\n    let td = this.props.trainee.traineeDetails;\n    return React.createElement(\"div\", {\n      className: \"answer-table-outer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Title, {\n      className: \"answer-table-heading\",\n      level: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Result\"), React.createElement(\"div\", {\n      className: \"answer-table-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Descriptions, {\n      bordered: true,\n      title: null,\n      border: true,\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Descriptions.Item, {\n      label: \"Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, td.name), React.createElement(Descriptions.Item, {\n      label: \"Email Id\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, td.emailid), React.createElement(Descriptions.Item, {\n      label: \"Contact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, td.contact), React.createElement(Descriptions.Item, {\n      label: \"Score\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.state.TotalScore)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), React.createElement(Table, {\n      size: \"small\",\n      rowKey: \"qid\",\n      loading: this.state.loading,\n      columns: columns,\n      dataSource: this.state.data,\n      pagination: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), this.props.trainee.hasGivenFeedBack ? null : React.createElement(Feedback, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      destroyOnClose: true,\n      width: \"70%\",\n      style: {\n        top: '30px'\n      },\n      title: \"Question details\",\n      visible: this.state.Mvisible,\n      onOk: this.handleCancel,\n      onCancel: this.handleCancel,\n      footer: null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(SingleQuestionDetails, {\n      qid: this.state.ActiveQuestionId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nclass SingleQuestionDetails extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fetching: false,\n      qdetails: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      fetching: true\n    });\n    Post({\n      url: apis.FETCH_SINGLE_QUESTION_BY_TRAINEE,\n      data: {\n        qid: this.props.qid\n      }\n    }).then(response => {\n      console.log(response);\n\n      if (response.data.success) {\n        this.setState({\n          qdetails: response.data.data[0]\n        });\n      } else {\n        Alert('error', 'Error !', response.data.message);\n      }\n\n      this.setState({\n        fetching: false\n      });\n    }).catch(error => {\n      this.setState({\n        fetching: false\n      });\n      console.log(error);\n      Alert('error', 'Error !', \"Server Error\");\n    });\n  }\n\n  render() {\n    const optn = ['A', 'B', 'C', 'D', 'E'];\n    let Optiondata = this.state.qdetails;\n\n    if (Optiondata !== null) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mainQuestionDetailsContaine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"questionDetailsBody\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, Optiondata.body), Optiondata.quesimg ? React.createElement(\"div\", {\n        className: \"questionDetailsImageContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: \"Unable to load\",\n        className: \"questionDetailsImage\",\n        src: Optiondata.quesimg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      })) : null, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, Optiondata.options.map((d, i) => {\n        return React.createElement(\"div\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          },\n          __self: this\n        }, React.createElement(Row, {\n          type: \"flex\",\n          justify: \"center\",\n          className: \"QuestionDetailsOptions\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282\n          },\n          __self: this\n        }, React.createElement(Col, {\n          span: 2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 283\n          },\n          __self: this\n        }, d.isAnswer ? React.createElement(Button, {\n          className: \"green\",\n          shape: \"circle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285\n          },\n          __self: this\n        }, optn[i]) : React.createElement(Button, {\n          type: \"primary\",\n          shape: \"circle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285\n          },\n          __self: this\n        }, optn[i])), d.optimg ? React.createElement(Col, {\n          span: 6,\n          style: {\n            padding: '5px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 290\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          alt: \"Unable to load\",\n          className: \"questionDetailsImage\",\n          src: d.optimg,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 291\n          },\n          __self: this\n        })) : null, d.optimg ? React.createElement(Col, {\n          span: 14,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297\n          },\n          __self: this\n        }, d.optbody) : React.createElement(Col, {\n          span: 20,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 299\n          },\n          __self: this\n        }, d.optbody)));\n      }))));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"skeletor-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, React.createElement(Skeleton, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }), React.createElement(Skeleton, {\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  trainee: state.trainee\n});\n\nexport default connect(mapStateToProps, {\n  FeedbackStatus\n})(Answer);","map":{"version":3,"sources":["D:\\Online-Examination-System-master\\Online-Examination-System-master\\frontend\\src\\components\\trainee\\answersheet\\answer.js"],"names":["React","Table","Icon","Tag","Skeleton","Descriptions","Modal","Button","Row","Col","connect","Post","apis","Alert","Typography","Feedback","FeedbackStatus","Title","Answer","Component","constructor","props","handleCancel","setState","Mvisible","OpenModel","qid","ActiveQuestionId","state","loading","data","TotalScore","componentDidMount","trainee","traineeid","testid","p1","url","FETCH_OWN_RESULT","userid","p2","FETCH_TRAINEE_TEST_QUESTION","id","p3","FEEDBACK_STATUS_CHECK","Promise","all","then","d","console","log","success","v","r","result","map","dd","i","score","status","message","catch","err","render","columns","title","key","text","record","dataIndex","tags","tag","toUpperCase","td","traineeDetails","name","emailid","contact","hasGivenFeedBack","top","SingleQuestionDetails","fetching","qdetails","FETCH_SINGLE_QUESTION_BY_TRAINEE","response","error","optn","Optiondata","body","quesimg","options","isAnswer","optimg","padding","optbody","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Table, Icon , Tag,Skeleton, Descriptions,Modal, Button,Row,Col } from 'antd';\r\nimport './answer.css';\r\nimport './answermobileview.css';\r\nimport './individualquestion_mobileview.css';\r\nimport { connect } from 'react-redux';\r\nimport { Post } from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport Alert from '../../common/alert';\r\nimport { Typography } from 'antd';\r\nimport Feedback from './feedback';\r\nimport { FeedbackStatus } from '../../../actions/traineeAction'\r\n\r\nconst { Title } = Typography;\r\n\r\n\r\nclass Answer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            loading:false,\r\n            data:[],\r\n            TotalScore:null,\r\n            Mvisible:false,\r\n            ActiveQuestionId:null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        let { traineeid, testid}=this.props.trainee;\r\n        this.setState({\r\n            loading:true\r\n        });\r\n        let p1 = Post({\r\n            url:apis.FETCH_OWN_RESULT,\r\n            data:{\r\n                userid:traineeid,\r\n                testid:testid\r\n            }\r\n        })\r\n        let p2 = Post({\r\n            url:`${apis.FETCH_TRAINEE_TEST_QUESTION}`,\r\n            data:{\r\n                id:testid\r\n            }\r\n        });\r\n        let p3 = Post({\r\n            url:`${apis.FEEDBACK_STATUS_CHECK}`,\r\n            data:{\r\n                userid:traineeid,\r\n                testid:testid\r\n            }\r\n        })\r\n        Promise.all([p1,p2,p3]).then(d=>{\r\n            console.log(d);\r\n            this.setState({\r\n                loading:false\r\n            });\r\n            if(d[0].data.success && d[1].data.success){\r\n                let v = d[1].data.data;\r\n                let r = d[0].data.result.result.map((dd,i)=>{\r\n                    return({\r\n                            ...dd,\r\n                            ...v[i]\r\n                        })\r\n                })\r\n                console.log(r)\r\n                this.setState({\r\n                    data:r,\r\n                    TotalScore:d[0].data.result.score\r\n                })\r\n                if(d[2].data.success){\r\n                    this.props.FeedbackStatus(d[2].data.status);\r\n                }\r\n\r\n            }\r\n            else{\r\n                Alert('error','Error!',`${d[0].data.success ? \"\":d[0].data.message} and ${d[1].data.success ? \"\":d[1].data.message}`)\r\n            }\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n            this.setState({\r\n                loading:false\r\n            });\r\n            Alert('error','Error!',\"Server Error\")\r\n        })\r\n    }\r\n\r\n    handleCancel=()=>{\r\n        this.setState({\r\n            Mvisible:false\r\n        })\r\n    }\r\n    OpenModel=(qid)=>{\r\n        this.setState({\r\n            ActiveQuestionId:qid,\r\n            Mvisible:true\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const columns = [\r\n            {\r\n                title: 'View Question',\r\n                key: 'action',\r\n                render: (text, record) => (\r\n                    <Button shape=\"circle\" icon=\"info\" type=\"primary\" size=\"small\" onClick={()=>{this.OpenModel(text.qid)}}></Button>\r\n                )\r\n            },\r\n            {\r\n                title:\"Question\",\r\n                dataIndex:'body',\r\n                key:'body'\r\n            },\r\n            {\r\n                title: 'Correct Answers',\r\n                key: 'correctAnswer',\r\n                dataIndex: 'correctAnswer',\r\n                render: tags => (\r\n                  <span>\r\n                    {tags.map(tag => {\r\n                      return (\r\n                        <Tag color=\"green\" key={tag}>\r\n                          {tag.toUpperCase()}\r\n                        </Tag>\r\n                      );\r\n                    })}\r\n                  </span>\r\n                ),\r\n            },\r\n            {\r\n                title: 'Given Answers',\r\n                key: 'givenAnswer',\r\n                dataIndex: 'givenAnswer',\r\n                render: tags => (\r\n                  <span>\r\n                    {tags.map(tag => {\r\n                      return (\r\n                        <Tag color=\"blue\" key={tag}>\r\n                          {tag.toUpperCase()}\r\n                        </Tag>\r\n                      );\r\n                    })}\r\n                  </span>\r\n                ),\r\n            },\r\n            {\r\n                title: 'Weightage',\r\n                dataIndex: 'weightage',\r\n                key: 'weightage',\r\n            },\r\n            {\r\n                title:\"Explanation\",\r\n                dataIndex: 'explanation',\r\n                key: 'explanation',\r\n            },\r\n            {\r\n                title : \"Status\",\r\n                dataIndex: 'iscorrect',\r\n                key: 'iscorrect',\r\n                render: tags => (\r\n                    <span>\r\n                        {\r\n                            tags?\r\n                            \r\n                                <Icon type=\"check-circle\" theme=\"twoTone\" twoToneColor=\"#52c41a\" />\r\n                            :\r\n                                <Icon type=\"close-circle\" theme=\"twoTone\" twoToneColor=\"red\" />\r\n                        }\r\n                    </span>\r\n                    \r\n                )\r\n            }\r\n        ]\r\n        let td = this.props.trainee.traineeDetails;\r\n        return (\r\n            <div className=\"answer-table-outer\">\r\n                <Title className=\"answer-table-heading\" level={4}>Result</Title>\r\n                <div className=\"answer-table-wrapper\">\r\n                    <Descriptions bordered title={null} border size=\"small\">\r\n                        <Descriptions.Item label=\"Name\">{td.name}</Descriptions.Item>\r\n                        <Descriptions.Item label=\"Email Id\">{td.emailid}</Descriptions.Item>\r\n                        <Descriptions.Item label=\"Contact\">{td.contact}</Descriptions.Item>\r\n                        <Descriptions.Item label=\"Score\">{this.state.TotalScore}</Descriptions.Item>\r\n                    </Descriptions>\r\n                    <br/>\r\n                    <Table \r\n                        size=\"small\"\r\n                        rowKey=\"qid\"\r\n                        loading={this.state.loading}\r\n                        columns={columns} \r\n                        dataSource={this.state.data} \r\n                        pagination={false}\r\n                    />\r\n                    {this.props.trainee.hasGivenFeedBack?null:<Feedback/>}\r\n                    <Modal\r\n                        destroyOnClose={true}\r\n                        width=\"70%\"\r\n                        style={{top:'30px'}}\r\n                        title=\"Question details\"\r\n                        visible={this.state.Mvisible}\r\n                        onOk={this.handleCancel}\r\n                        onCancel={this.handleCancel}\r\n                        footer={null}\r\n                        >\r\n                        <SingleQuestionDetails qid={this.state.ActiveQuestionId}/>\r\n                    </Modal>                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass SingleQuestionDetails extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            fetching:false,\r\n            qdetails:null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            fetching:true\r\n        })\r\n        Post({\r\n            url:apis.FETCH_SINGLE_QUESTION_BY_TRAINEE,\r\n            data:{\r\n                qid:this.props.qid\r\n            }\r\n        }).then((response)=>{\r\n            console.log(response)\r\n            if(response.data.success){\r\n                this.setState({\r\n                    qdetails:response.data.data[0]\r\n                })\r\n            }\r\n            else{\r\n                Alert('error','Error !',response.data.message);\r\n            }\r\n            this.setState({\r\n                fetching:false\r\n            })\r\n        }).catch((error)=>{\r\n            this.setState({\r\n                fetching:false\r\n            })\r\n            console.log(error)\r\n            Alert('error','Error !',\"Server Error\");\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        const optn =['A','B','C','D','E'];\r\n        let Optiondata=this.state.qdetails;\r\n        if(Optiondata!==null){\r\n            return (\r\n                <div>\r\n                    <div className=\"mainQuestionDetailsContaine\">\r\n                        <div className=\"questionDetailsBody\">\r\n                            {Optiondata.body}\r\n                        </div>\r\n                        {Optiondata.quesimg?\r\n                            <div className=\"questionDetailsImageContainer\">\r\n                                <img   alt=\"Unable to load\" className=\"questionDetailsImage\" src={Optiondata.quesimg} />  \r\n                            </div>\r\n                            : null\r\n                        }\r\n                        <div>\r\n                            {Optiondata.options.map((d,i)=>{\r\n                                return(\r\n                                    <div key={i}>\r\n                                        <Row type=\"flex\" justify=\"center\" className=\"QuestionDetailsOptions\">\r\n                                            <Col span={2}>\r\n                                                {\r\n                                                    d.isAnswer?<Button className=\"green\" shape=\"circle\">{optn[i]}</Button>:<Button type=\"primary\" shape=\"circle\">{optn[i]}</Button>\r\n                                                }\r\n                                                \r\n                                            </Col>\r\n                                            {d.optimg?\r\n                                                <Col span={6} style={{padding:'5px'}}>\r\n                                                    <img alt=\"Unable to load\" className=\"questionDetailsImage\" src={d.optimg} />\r\n                                                </Col>\r\n                                            :\r\n                                                null\r\n                                            }\r\n                                            {d.optimg?\r\n                                                <Col span={14}>{d.optbody}</Col>\r\n                                            :\r\n                                                <Col span={20}>{d.optbody}</Col>\r\n                                            }\r\n                                        </Row>\r\n                                    \r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n    \r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"skeletor-wrapper\">\r\n                    <Skeleton active />\r\n                    <Skeleton active />\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    trainee : state.trainee\r\n});\r\n\r\nexport default connect(mapStateToProps,{\r\n    FeedbackStatus\r\n})(Answer);\r\n"]},"metadata":{},"sourceType":"module"}