{"ast":null,"code":"import _objectSpread from \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"D:\\\\Online-Examination-System-master\\\\Online-Examination-System-master\\\\frontend\\\\src\\\\components\\\\trainer\\\\allquestions\\\\allquestion.js\";\nimport React, { Component } from 'react';\nimport { Table, Input, Button, Icon, Typography, Popconfirm, Divider, Modal, Select, Row, Col } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { ChangeQuestionModalState, ChangeQuestionTableData, ChangeQuestionSearchText, ChangeSelectedSubjects } from '../../../actions/trainerAction';\nimport { ChangeSubjectTableData } from '../../../actions/adminAction';\nimport './allquestion.css';\nimport Alert from '../../../components/common/alert';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport NewQuestionForm from '../newquestion/newquestion';\nimport QuestionDetails from '../questionDetails/questiondetails';\n\nclass AllQuestions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.OpendetailsModal = id => {\n      this.setState((previousState, previousProps) => {\n        return {\n          questiondetailsId: id,\n          questiondetailsModelVisible: true\n        };\n      });\n    };\n\n    this.ClosedetailsModal = () => {\n      this.setState((previousState, previousProps) => {\n        return {\n          questiondetailsId: null,\n          questiondetailsModelVisible: false\n        };\n      });\n    };\n\n    this.openNewModal = mode => {\n      this.props.ChangeQuestionModalState(true);\n    };\n\n    this.closeNewModal = () => {\n      this.props.ChangeQuestionModalState(false);\n    };\n\n    this.handleSubjectChange = s => {\n      this.props.ChangeSelectedSubjects(s);\n      this.props.ChangeQuestionTableData(s);\n    };\n\n    this.deleteQuestion = id => {\n      SecurePost({\n        url: \"\".concat(apis.DELETE_QUESTION),\n        data: {\n          _id: id\n        }\n      }).then(response => {\n        if (response.data.success) {\n          Alert('success', 'Success', response.data.message);\n          this.props.ChangeQuestionTableData(this.props.trainer.selectedSubjects);\n        } else {\n          return Alert('warning', 'Warning!', response.data.message);\n        }\n      }).catch(error => {\n        return Alert('error', 'Error!', 'Server Error');\n      });\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => React.createElement(\"div\", {\n        style: {\n          padding: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Input, {\n        ref: node => {\n          this.searchInput = node;\n        },\n        placeholder: \"Search \".concat(dataIndex),\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: () => this.handleSearch(selectedKeys, confirm),\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: 'block'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        onClick: () => this.handleSearch(selectedKeys, confirm),\n        icon: \"search\",\n        size: \"small\",\n        style: {\n          width: 90,\n          marginRight: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Search\"), React.createElement(Button, {\n        onClick: () => this.handleReset(clearFilters),\n        size: \"small\",\n        style: {\n          width: 90\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Reset\")),\n      filterIcon: filtered => React.createElement(Icon, {\n        type: \"search\",\n        style: {\n          color: filtered ? '#1890ff' : undefined\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select());\n        }\n      },\n      render: text => React.createElement(Highlighter, {\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [this.props.trainer.QuestionsearchText],\n        autoEscape: true,\n        textToHighlight: text.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })\n    });\n\n    this.handleSearch = (selectedKeys, confirm) => {\n      confirm();\n      this.props.ChangeQuestionSearchText(selectedKeys[0]);\n    };\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.props.ChangeQuestionSearchText('');\n    };\n\n    this.state = {\n      questiondetailsId: null,\n      questiondetailsModelVisible: false\n    };\n  }\n\n  componentDidMount() {\n    this.props.ChangeSubjectTableData();\n    this.props.ChangeQuestionTableData(this.props.trainer.selectedSubjects);\n  }\n\n  render() {\n    const Title = Typography.Title;\n    const columns = [{\n      title: 'Subject',\n      dataIndex: 'subject.topic',\n      key: 'subject.topic',\n      width: '15%'\n    }, _objectSpread({\n      title: 'Question',\n      dataIndex: 'body',\n      key: 'body',\n      width: '50%'\n    }, this.getColumnSearchProps('body')), {\n      title: 'Created By',\n      dataIndex: 'createdBy.name',\n      key: 'createdBy.name',\n      width: '15%'\n    }, {\n      title: 'Action',\n      key: '_id',\n      dataIndex: '_id',\n      width: '15%',\n      render: key => React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        shape: \"circle\",\n        onClick: () => this.OpendetailsModal(key),\n        icon: \"info-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(Divider, {\n        type: \"vertical\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }), React.createElement(Popconfirm, {\n        title: \"Are you sure\\uFF1F\",\n        cancelText: \"No\",\n        okText: \"Yes\",\n        onConfirm: () => {\n          this.deleteQuestion(key);\n        },\n        icon: React.createElement(Icon, {\n          type: \"delete\",\n          style: {\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"danger\",\n        shape: \"circle\",\n        icon: \"delete\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      })))\n    }];\n    return React.createElement(\"div\", {\n      className: \"admin-table-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      icon: \"question-circle\",\n      style: {\n        marginBottom: '10px'\n      },\n      onClick: () => this.openNewModal('Add New Question'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Add New Question\")), React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(Select, {\n      mode: \"multiple\",\n      placeholder: \"Select one or more subjects\",\n      defaultValue: this.props.trainer.selectedSubjects,\n      onChange: this.handleSubjectChange,\n      style: {\n        width: '100%'\n      },\n      allowClear: true,\n      optionFilterProp: \"s\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, this.props.admin.subjectTableData.map(item => React.createElement(Select.Option, {\n      key: item._id,\n      value: item._id,\n      s: item.topic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, item.topic)))))), React.createElement(\"div\", {\n      className: \"register-trainer-form-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(Title, {\n      level: 4,\n      style: {\n        color: '#fff',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"List of Questions\")), React.createElement(Table, {\n      bordered: true,\n      columns: columns,\n      dataSource: this.props.trainer.QuestionTableData,\n      size: \"medium\",\n      pagination: {\n        pageSize: 5\n      },\n      loading: this.props.trainer.QuestionTableLoading,\n      rowKey: \"_id\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      visible: this.props.trainer.NewQuestionmodalOpened,\n      title: \"New Question\",\n      onCancel: this.closeNewModal,\n      style: {\n        top: '20px',\n        padding: '0px',\n        backgroundColor: 'rgb(155,175,190)'\n      },\n      width: \"90%\",\n      destroyOnClose: true,\n      footer: [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(NewQuestionForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    })), React.createElement(Modal, {\n      visible: this.state.questiondetailsModelVisible,\n      title: \"Question Details\",\n      onCancel: this.ClosedetailsModal,\n      style: {\n        top: '20px',\n        padding: '0px',\n        backgroundColor: 'rgb(155,175,190)'\n      },\n      width: \"70%\",\n      destroyOnClose: true,\n      footer: [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(QuestionDetails, {\n      id: this.state.questiondetailsId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  trainer: state.trainer,\n  admin: state.admin\n});\n\nexport default connect(mapStateToProps, {\n  ChangeQuestionModalState,\n  ChangeQuestionTableData,\n  ChangeQuestionSearchText,\n  ChangeSelectedSubjects,\n  ChangeSubjectTableData\n})(AllQuestions);","map":{"version":3,"sources":["D:\\Online-Examination-System-master\\Online-Examination-System-master\\frontend\\src\\components\\trainer\\allquestions\\allquestion.js"],"names":["React","Component","Table","Input","Button","Icon","Typography","Popconfirm","Divider","Modal","Select","Row","Col","Highlighter","connect","ChangeQuestionModalState","ChangeQuestionTableData","ChangeQuestionSearchText","ChangeSelectedSubjects","ChangeSubjectTableData","Alert","SecurePost","apis","NewQuestionForm","QuestionDetails","AllQuestions","constructor","props","OpendetailsModal","id","setState","previousState","previousProps","questiondetailsId","questiondetailsModelVisible","ClosedetailsModal","openNewModal","mode","closeNewModal","handleSubjectChange","s","deleteQuestion","url","DELETE_QUESTION","data","_id","then","response","success","message","trainer","selectedSubjects","catch","error","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","node","searchInput","e","target","value","handleSearch","width","marginBottom","display","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","backgroundColor","QuestionsearchText","state","componentDidMount","Title","columns","title","key","admin","subjectTableData","map","item","topic","textAlign","QuestionTableData","pageSize","QuestionTableLoading","NewQuestionmodalOpened","top","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Input, Button, Icon, Typography,Popconfirm,Divider, Modal, Select, Row, Col  } from 'antd';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n  ChangeQuestionModalState,\r\n  ChangeQuestionTableData,\r\n  ChangeQuestionSearchText,\r\n  ChangeSelectedSubjects\r\n} from '../../../actions/trainerAction';\r\nimport { \r\n  ChangeSubjectTableData\r\n} from '../../../actions/adminAction';\r\nimport './allquestion.css'\r\nimport Alert from '../../../components/common/alert';\r\nimport {SecurePost} from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport NewQuestionForm from '../newquestion/newquestion';\r\nimport QuestionDetails from '../questionDetails/questiondetails';\r\n\r\n\r\n\r\nclass AllQuestions extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      questiondetailsId : null,\r\n      questiondetailsModelVisible:false\r\n    }\r\n  }\r\n  OpendetailsModal = (id)=>{\r\n    this.setState((previousState,previousProps)=>{\r\n      return{\r\n        questiondetailsId:id,\r\n        questiondetailsModelVisible:true\r\n      }\r\n    })\r\n  }\r\n  ClosedetailsModal = ()=>{\r\n    this.setState((previousState,previousProps)=>{\r\n      return{\r\n        questiondetailsId:null,\r\n        questiondetailsModelVisible:false\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.ChangeSubjectTableData();\r\n    this.props.ChangeQuestionTableData(this.props.trainer.selectedSubjects);\r\n  }\r\n\r\n  openNewModal = (mode)=>{\r\n    this.props.ChangeQuestionModalState(true);\r\n  }\r\n\r\n  closeNewModal = ()=>{\r\n    this.props.ChangeQuestionModalState(false);\r\n  }\r\n\r\n  handleSubjectChange =(s)=>{\r\n    this.props.ChangeSelectedSubjects(s);\r\n    this.props.ChangeQuestionTableData(s);\r\n  }\r\n\r\n  deleteQuestion = (id)=>{\r\n    SecurePost({\r\n      url : `${apis.DELETE_QUESTION}`,\r\n      data : {\r\n          _id : id\r\n      }\r\n    }).then((response)=>{\r\n      if(response.data.success){\r\n        Alert('success','Success',response.data.message);\r\n        this.props.ChangeQuestionTableData(this.props.trainer.selectedSubjects);\r\n      }\r\n      else{\r\n        return Alert('warning','Warning!',response.data.message);\r\n      }\r\n    }).catch((error)=>{\r\n      return Alert('error','Error!','Server Error');\r\n    })\r\n  }\r\n\r\n    getColumnSearchProps = dataIndex => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n          <div style={{ padding: 8 }}>\r\n            <Input\r\n              ref={node => {\r\n                this.searchInput = node;\r\n              }}\r\n              placeholder={`Search ${dataIndex}`}\r\n              value={selectedKeys[0]}\r\n              onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n              onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\r\n              style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => this.handleSearch(selectedKeys, confirm)}\r\n              icon=\"search\"\r\n              size=\"small\"\r\n              style={{ width: 90, marginRight: 8 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        ),\r\n        filterIcon: filtered => (\r\n          <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\r\n        ),\r\n        onFilter: (value, record) =>\r\n          record[dataIndex]\r\n            .toString()\r\n            .toLowerCase()\r\n            .includes(value.toLowerCase()),\r\n        onFilterDropdownVisibleChange: visible => {\r\n          if (visible) {\r\n            setTimeout(() => this.searchInput.select());\r\n          }\r\n        },\r\n        render: text => (\r\n          <Highlighter\r\n            highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n            searchWords={[this.props.trainer.QuestionsearchText]}\r\n            autoEscape\r\n            textToHighlight={text.toString()}\r\n          />\r\n        ),\r\n      });\r\n    \r\n      handleSearch = (selectedKeys, confirm) => {\r\n        confirm();\r\n        this.props.ChangeQuestionSearchText(selectedKeys[0])\r\n      };\r\n    \r\n      handleReset = clearFilters => {\r\n        clearFilters();\r\n        this.props.ChangeQuestionSearchText('')\r\n      };\r\n\r\n    render() {\r\n      const { Title } = Typography;\r\n      const columns = [\r\n        {\r\n          title: 'Subject',\r\n          dataIndex: 'subject.topic',\r\n          key: 'subject.topic',\r\n          width: '15%',\r\n        },\r\n        {\r\n          title: 'Question',\r\n          dataIndex: 'body',\r\n          key: 'body',\r\n          width: '50%',\r\n          ...this.getColumnSearchProps('body'),\r\n        },\r\n        {\r\n          title: 'Created By',\r\n          dataIndex: 'createdBy.name',\r\n          key: 'createdBy.name',\r\n          width: '15%'\r\n        },\r\n        \r\n        {\r\n          title: 'Action',\r\n          key: '_id',\r\n          dataIndex: '_id',\r\n          width: '15%',\r\n          render: (key) => (\r\n            <span>\r\n              <Button type=\"primary\" shape=\"circle\" onClick={()=>this.OpendetailsModal(key)} icon=\"info-circle\" />\r\n              <Divider type=\"vertical\" />\r\n              <Popconfirm\r\n                  title=\"Are you sure？\"\r\n                  cancelText=\"No\"\r\n                  okText=\"Yes\"\r\n                  onConfirm={()=>{this.deleteQuestion(key)}}\r\n                  icon={<Icon type=\"delete\" style={{ color: 'red' }} />}\r\n                >\r\n                  <Button type=\"danger\" shape=\"circle\" icon=\"delete\" />\r\n                </Popconfirm>\r\n            </span>\r\n          ),\r\n        },\r\n      ];\r\n        return (\r\n            <div className=\"admin-table-container\">\r\n              <div>\r\n                <Row>\r\n                  <Col span={12}>\r\n                    <Button type=\"primary\" icon=\"question-circle\" style={{marginBottom:'10px'}} onClick={()=>this.openNewModal('Add New Question')}>\r\n                      Add New Question\r\n                    </Button>\r\n                  </Col>\r\n                  <Col span={12}>\r\n                    <Select\r\n                      mode=\"multiple\"\r\n                      placeholder=\"Select one or more subjects\"\r\n                      defaultValue={this.props.trainer.selectedSubjects}\r\n                      onChange={this.handleSubjectChange}\r\n                      style={{ width: '100%' }}\r\n                      allowClear={true}\r\n                      optionFilterProp=\"s\"\r\n                    >\r\n                      {this.props.admin.subjectTableData.map(item => (\r\n                        <Select.Option key={item._id} value={item._id} s={item.topic}>\r\n                          {item.topic}\r\n                        </Select.Option>\r\n                      ))}\r\n                    </Select>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n              <div className=\"register-trainer-form-header\">\r\n                <Title level={4} style={{color:'#fff',textAlign:'center'}}>List of Questions</Title>\r\n              </div>\r\n              <Table \r\n                bordered={true} \r\n                columns={columns} \r\n                dataSource={this.props.trainer.QuestionTableData} \r\n                size=\"medium\" \r\n                pagination={{ pageSize: 5 }}\r\n                loading={this.props.trainer.QuestionTableLoading}\r\n                rowKey=\"_id\" \r\n              />\r\n              <Modal\r\n                visible={this.props.trainer.NewQuestionmodalOpened}\r\n                title=\"New Question\"\r\n                onCancel={this.closeNewModal}\r\n                style={{top :'20px',padding:'0px',backgroundColor:'rgb(155,175,190)'}}\r\n                width=\"90%\"\r\n                destroyOnClose={true}\r\n                footer={[]}\r\n              >\r\n                <NewQuestionForm />\r\n              </Modal>\r\n\r\n              <Modal\r\n                visible={this.state.questiondetailsModelVisible}\r\n                title=\"Question Details\"\r\n                onCancel={this.ClosedetailsModal}\r\n                style={{top :'20px',padding:'0px',backgroundColor:'rgb(155,175,190)'}}\r\n                width=\"70%\"\r\n                destroyOnClose={true}\r\n                footer={[]}\r\n              >\r\n                <QuestionDetails id={this.state.questiondetailsId} / >\r\n              </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    trainer : state.trainer,\r\n    admin : state.admin\r\n});\r\n\r\nexport default connect(mapStateToProps,{\r\n  ChangeQuestionModalState,\r\n  ChangeQuestionTableData,\r\n  ChangeQuestionSearchText,\r\n  ChangeSelectedSubjects,\r\n  ChangeSubjectTableData\r\n})(AllQuestions);"]},"metadata":{},"sourceType":"module"}